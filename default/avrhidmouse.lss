
avrhidmouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000944  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000944  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800064  00000948  000009bc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011cf  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000887  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064f  00000000  00000000  000031b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6f 00 	jmp	0xde	; 0xde <__ctors_end>
   4:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_1>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000054 <usbDescriptorHidReport>:
  54:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  64:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 03     ..%...u.....u...
  74:	05 01 09 30 09 31 09 38 15 81 25 7f 75 08 95 03     ...0.1.8..%.u...
  84:	81 06 c0 c0                                         ....

00000088 <usbDescriptorString0>:
  88:	04 03 09 04                                         ....

0000008c <usbDescriptorStringVendor>:
  8c:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  9c:	74 00                                               t.

0000009e <usbDescriptorStringDevice>:
  9e:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

000000aa <usbDescriptorDevice>:
  aa:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
  ba:	00 01                                               ..

000000bc <usbDescriptorConfiguration>:
  bc:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  cc:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  dc:	00 64                                               .d

000000de <__ctors_end>:
  de:	11 24       	eor	r1, r1
  e0:	1f be       	out	0x3f, r1	; 63
  e2:	cf e5       	ldi	r28, 0x5F	; 95
  e4:	d4 e0       	ldi	r29, 0x04	; 4
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	a0 e6       	ldi	r26, 0x60	; 96
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e4 e4       	ldi	r30, 0x44	; 68
  f2:	f9 e0       	ldi	r31, 0x09	; 9
  f4:	02 c0       	rjmp	.+4      	; 0xfa <.do_copy_data_start>

000000f6 <.do_copy_data_loop>:
  f6:	05 90       	lpm	r0, Z+
  f8:	0d 92       	st	X+, r0

000000fa <.do_copy_data_start>:
  fa:	a4 36       	cpi	r26, 0x64	; 100
  fc:	b1 07       	cpc	r27, r17
  fe:	d9 f7       	brne	.-10     	; 0xf6 <.do_copy_data_loop>

00000100 <__do_clear_bss>:
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	a4 e6       	ldi	r26, 0x64	; 100
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a2 3a       	cpi	r26, 0xA2	; 162
 10c:	b1 07       	cpc	r27, r17
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 a3 01 	call	0x346	; 0x346 <main>
 114:	0c 94 a0 04 	jmp	0x940	; 0x940 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000011c <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	87 bb       	out	0x17, r24	; 23

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;

	//change LCD mode
	SET_RW();		//Read mode
 122:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
 124:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	c6 9a       	sbi	0x18, 6	; 24
 130:	82 2f       	mov	r24, r18
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 136:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 138:	82 95       	swap	r24
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	92 2f       	mov	r25, r18
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 142:	c6 98       	cbi	0x18, 6	; 24
 144:	92 2f       	mov	r25, r18
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 14a:	c6 9a       	sbi	0x18, 6	; 24
 14c:	92 2f       	mov	r25, r18
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 152:	96 b3       	in	r25, 0x16	; 22
 154:	92 2f       	mov	r25, r18
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 15a:	c6 98       	cbi	0x18, 6	; 24
 15c:	92 2f       	mov	r25, r18
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 162:	87 fd       	sbrc	r24, 7
 164:	e4 cf       	rjmp	.-56     	; 0x12e <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 166:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 168:	87 b3       	in	r24, 0x17	; 23
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	87 bb       	out	0x17, r24	; 23

}
 16e:	08 95       	ret

00000170 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 170:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 172:	66 23       	and	r22, r22
 174:	11 f4       	brne	.+4      	; 0x17a <LCDByte+0xa>
	CLEAR_RS();
 176:	c4 98       	cbi	0x18, 4	; 24
 178:	01 c0       	rjmp	.+2      	; 0x17c <LCDByte+0xc>
else
	SET_RS();
 17a:	c4 9a       	sbi	0x18, 4	; 24
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	82 2f       	mov	r24, r18
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 184:	c6 9a       	sbi	0x18, 6	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 186:	88 b3       	in	r24, 0x18	; 24
 188:	93 2f       	mov	r25, r19
 18a:	92 95       	swap	r25
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 192:	98 bb       	out	0x18, r25	; 24
 194:	82 2f       	mov	r24, r18
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 19a:	c6 98       	cbi	0x18, 6	; 24
 19c:	82 2f       	mov	r24, r18
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a2:	c6 9a       	sbi	0x18, 6	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	3f 70       	andi	r19, 0x0F	; 15
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	82 2f       	mov	r24, r18
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1b4:	c6 98       	cbi	0x18, 6	; 24
 1b6:	2a 95       	dec	r18
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1ba:	0e 94 8e 00 	call	0x11c	; 0x11c <LCDBusyLoop>
}
 1be:	08 95       	ret

000001c0 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1c0:	1f 93       	push	r17
 1c2:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	8c e4       	ldi	r24, 0x4C	; 76
 1c6:	9d e1       	ldi	r25, 0x1D	; 29
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	8f 60       	ori	r24, 0x0F	; 15
 1d0:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 1d2:	be 9a       	sbi	0x17, 6	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1d4:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1d6:	bd 9a       	sbi	0x17, 5	; 23

	LCD_DATA_PORT&=0XF0;
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 1de:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RW();
 1e0:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 1e2:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	98 2f       	mov	r25, r24
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1ec:	c6 9a       	sbi	0x18, 6	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1ee:	c1 9a       	sbi	0x18, 1	; 24
 1f0:	98 2f       	mov	r25, r24
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 1f6:	c6 98       	cbi	0x18, 6	; 24
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	81 2f       	mov	r24, r17
 204:	8c 60       	ori	r24, 0x0C	; 12
 206:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
}
 212:	1f 91       	pop	r17
 214:	08 95       	ret

00000216 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	04 c0       	rjmp	.+8      	; 0x226 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	msg++;
 224:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	c9 f7       	brne	.-14     	; 0x21e <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	00 d0       	rcall	.+0      	; 0x240 <LCDWriteInt+0xe>
 240:	00 d0       	rcall	.+0      	; 0x242 <LCDWriteInt+0x10>
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	9c 01       	movw	r18, r24
 24a:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 24c:	fe 01       	movw	r30, r28
 24e:	31 96       	adiw	r30, 0x01	; 1
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	df 01       	movw	r26, r30
 254:	1d 92       	st	X+, r1
 256:	8a 95       	dec	r24
 258:	e9 f7       	brne	.-6      	; 0x254 <LCDWriteInt+0x22>
 25a:	fe 01       	movw	r30, r28
 25c:	35 96       	adiw	r30, 0x05	; 5
 25e:	0d c0       	rjmp	.+26     	; 0x27a <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 260:	c9 01       	movw	r24, r18
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodhi4>
 26a:	80 83       	st	Z, r24
	val=val/10;
 26c:	c9 01       	movw	r24, r18
 26e:	6a e0       	ldi	r22, 0x0A	; 10
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divmodhi4>
 276:	9b 01       	movw	r18, r22
 278:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 27a:	21 15       	cp	r18, r1
 27c:	31 05       	cpc	r19, r1
 27e:	81 f7       	brne	.-32     	; 0x260 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 280:	bf ef       	ldi	r27, 0xFF	; 255
 282:	0f 3f       	cpi	r16, 0xFF	; 255
 284:	1b 07       	cpc	r17, r27
 286:	79 f4       	brne	.+30     	; 0x2a6 <LCDWriteInt+0x74>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 28c:	ae 01       	movw	r20, r28
 28e:	4f 5f       	subi	r20, 0xFF	; 255
 290:	5f 4f       	sbci	r21, 0xFF	; 255
 292:	02 c0       	rjmp	.+4      	; 0x298 <LCDWriteInt+0x66>
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	fa 01       	movw	r30, r20
 29a:	e2 0f       	add	r30, r18
 29c:	f3 1f       	adc	r31, r19
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	c1 f3       	breq	.-16     	; 0x294 <LCDWriteInt+0x62>
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2a6:	25 e0       	ldi	r18, 0x05	; 5
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	20 1b       	sub	r18, r16
 2ac:	31 0b       	sbc	r19, r17
 2ae:	7e 01       	movw	r14, r28
 2b0:	08 94       	sec
 2b2:	e1 1c       	adc	r14, r1
 2b4:	f1 1c       	adc	r15, r1
 2b6:	e2 0e       	add	r14, r18
 2b8:	f3 1e       	adc	r15, r19
 2ba:	89 01       	movw	r16, r18
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2be:	f7 01       	movw	r30, r14
 2c0:	81 91       	ld	r24, Z+
 2c2:	7f 01       	movw	r14, r30
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 5d       	subi	r24, 0xD0	; 208
 2c8:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	1f 4f       	sbci	r17, 0xFF	; 255
 2d0:	05 30       	cpi	r16, 0x05	; 5
 2d2:	11 05       	cpc	r17, r1
 2d4:	a4 f3       	brlt	.-24     	; 0x2be <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 2ee:	88 32       	cpi	r24, 0x28	; 40
 2f0:	30 f4       	brcc	.+12     	; 0x2fe <LCDGotoXY+0x10>
 if(x<40)
 {
  if(y) x|=0b01000000;
 2f2:	61 11       	cpse	r22, r1
 2f4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
 2fe:	08 95       	ret

00000300 <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 300:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 302:	80 81       	ld	r24, Z
 304:	80 76       	andi	r24, 0x60	; 96
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	e1 f4       	brne	.+56     	; 0x342 <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	41 f4       	brne	.+16     	; 0x320 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 310:	86 e6       	ldi	r24, 0x66	; 102
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 87 00 	sts	0x0087, r25
 318:	80 93 86 00 	sts	0x0086, r24
 31c:	84 e0       	ldi	r24, 0x04	; 4
 31e:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	41 f4       	brne	.+16     	; 0x334 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 324:	8a e6       	ldi	r24, 0x6A	; 106
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 87 00 	sts	0x0087, r25
 32c:	80 93 86 00 	sts	0x0086, r24
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	29 f4       	brne	.+10     	; 0x342 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
 338:	83 81       	ldd	r24, Z+3	; 0x03
 33a:	80 93 6a 00 	sts	0x006A, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
 344:	08 95       	ret

00000346 <main>:

/* ------------------------------------------------------------------------- */

int __attribute__((noreturn)) main(void)
{
 346:	2e e0       	ldi	r18, 0x0E	; 14
 348:	88 e1       	ldi	r24, 0x18	; 24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	a8 95       	wdr
 352:	81 bd       	out	0x21, r24	; 33
 354:	0f be       	out	0x3f, r0	; 63
 356:	21 bd       	out	0x21, r18	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 358:	0e 94 44 03 	call	0x688	; 0x688 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 35c:	8c 9a       	sbi	0x11, 4	; 17
 35e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 360:	4a ef       	ldi	r20, 0xFA	; 250
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	04 c0       	rjmp	.+8      	; 0x36e <main+0x28>
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 366:	a8 95       	wdr
 368:	ca 01       	movw	r24, r20
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x24>
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	d1 f7       	brne	.-12     	; 0x366 <main+0x20>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 372:	8c 98       	cbi	0x11, 4	; 17
    sei();
 374:	78 94       	sei
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 376:	a8 95       	wdr
        usbPoll();
 378:	0e 94 51 03 	call	0x6a2	; 0x6a2 <usbPoll>
        if(usbInterruptIsReady()){
 37c:	80 91 77 00 	lds	r24, 0x0077
 380:	84 ff       	sbrs	r24, 4
 382:	f9 cf       	rjmp	.-14     	; 0x376 <main+0x30>
static void advanceCircleByFixedAngle(void)
{
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
 384:	40 91 64 00 	lds	r20, 0x0064
 388:	50 91 65 00 	lds	r21, 0x0065
 38c:	14 16       	cp	r1, r20
 38e:	15 06       	cpc	r1, r21
 390:	1c f0       	brlt	.+6      	; 0x398 <main+0x52>
 392:	80 ee       	ldi	r24, 0xE0	; 224
 394:	9f ef       	ldi	r25, 0xFF	; 255
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x56>
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	84 0f       	add	r24, r20
 39e:	95 1f       	adc	r25, r21
 3a0:	36 e0       	ldi	r19, 0x06	; 6
 3a2:	95 95       	asr	r25
 3a4:	87 95       	ror	r24
 3a6:	3a 95       	dec	r19
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x5c>
 3aa:	80 93 67 00 	sts	0x0067, r24
    sinus += d;
 3ae:	20 91 60 00 	lds	r18, 0x0060
 3b2:	30 91 61 00 	lds	r19, 0x0061
 3b6:	28 0f       	add	r18, r24
 3b8:	31 1d       	adc	r19, r1
 3ba:	30 93 61 00 	sts	0x0061, r19
 3be:	20 93 60 00 	sts	0x0060, r18
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	1c f0       	brlt	.+6      	; 0x3ce <main+0x88>
 3c8:	80 ee       	ldi	r24, 0xE0	; 224
 3ca:	9f ef       	ldi	r25, 0xFF	; 255
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <main+0x8c>
 3ce:	80 e2       	ldi	r24, 0x20	; 32
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	82 0f       	add	r24, r18
 3d4:	93 1f       	adc	r25, r19
 3d6:	26 e0       	ldi	r18, 0x06	; 6
 3d8:	95 95       	asr	r25
 3da:	87 95       	ror	r24
 3dc:	2a 95       	dec	r18
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x92>
 3e0:	80 93 68 00 	sts	0x0068, r24
    cosinus -= d;
 3e4:	48 1b       	sub	r20, r24
 3e6:	51 09       	sbc	r21, r1
 3e8:	50 93 65 00 	sts	0x0065, r21
 3ec:	40 93 64 00 	sts	0x0064, r20
        usbPoll();
        if(usbInterruptIsReady()){
            /* called after every poll of the interrupt endpoint */
            advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	86 e6       	ldi	r24, 0x66	; 102
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <usbSetInterrupt>
 3fa:	bd cf       	rjmp	.-134    	; 0x376 <main+0x30>

000003fc <usbCrc16>:
 3fc:	a8 2f       	mov	r26, r24
 3fe:	b9 2f       	mov	r27, r25
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	50 ea       	ldi	r21, 0xA0	; 160
 408:	60 95       	com	r22
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	09 c0       	rjmp	.+18     	; 0x420 <usbCrcLoopEntry>

0000040e <usbCrcByteLoop>:
 40e:	2d 91       	ld	r18, X+
 410:	82 27       	eor	r24, r18

00000412 <usbCrcBitLoop>:
 412:	97 95       	ror	r25
 414:	87 95       	ror	r24
 416:	10 f0       	brcs	.+4      	; 0x41c <usbCrcNoXor>
 418:	84 27       	eor	r24, r20
 41a:	95 27       	eor	r25, r21

0000041c <usbCrcNoXor>:
 41c:	30 5e       	subi	r19, 0xE0	; 224
 41e:	c8 f3       	brcs	.-14     	; 0x412 <usbCrcBitLoop>

00000420 <usbCrcLoopEntry>:
 420:	6f 5f       	subi	r22, 0xFF	; 255
 422:	a8 f3       	brcs	.-22     	; 0x40e <usbCrcByteLoop>

00000424 <usbCrcReady>:
 424:	08 95       	ret

00000426 <usbCrc16Append>:
 426:	ea df       	rcall	.-44     	; 0x3fc <usbCrc16>
 428:	8d 93       	st	X+, r24
 42a:	9d 93       	st	X+, r25
 42c:	08 95       	ret

0000042e <__vector_1>:
 42e:	cf 93       	push	r28
 430:	cf b7       	in	r28, 0x3f	; 63
 432:	cf 93       	push	r28

00000434 <waitForJ>:
 434:	c3 95       	inc	r28
 436:	84 9b       	sbis	0x10, 4	; 16
 438:	e9 f7       	brne	.-6      	; 0x434 <waitForJ>

0000043a <waitForK>:
 43a:	84 9b       	sbis	0x10, 4	; 16
 43c:	09 c0       	rjmp	.+18     	; 0x450 <foundK>
 43e:	84 9b       	sbis	0x10, 4	; 16
 440:	07 c0       	rjmp	.+14     	; 0x450 <foundK>
 442:	84 9b       	sbis	0x10, 4	; 16
 444:	05 c0       	rjmp	.+10     	; 0x450 <foundK>
 446:	84 9b       	sbis	0x10, 4	; 16
 448:	03 c0       	rjmp	.+6      	; 0x450 <foundK>
 44a:	84 9b       	sbis	0x10, 4	; 16
 44c:	01 c0       	rjmp	.+2      	; 0x450 <foundK>
 44e:	a1 c0       	rjmp	.+322    	; 0x592 <sofError>

00000450 <foundK>:
 450:	df 93       	push	r29
 452:	c0 91 85 00 	lds	r28, 0x0085
 456:	dd 27       	eor	r29, r29
 458:	c4 57       	subi	r28, 0x74	; 116
 45a:	df 4f       	sbci	r29, 0xFF	; 255
 45c:	84 9b       	sbis	0x10, 4	; 16
 45e:	02 c0       	rjmp	.+4      	; 0x464 <haveTwoBitsK>
 460:	df 91       	pop	r29
 462:	eb cf       	rjmp	.-42     	; 0x43a <waitForK>

00000464 <haveTwoBitsK>:
 464:	2f 93       	push	r18
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	00 b3       	in	r16, 0x10	; 16
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	04 fb       	bst	r16, 4
 470:	20 f9       	bld	r18, 0
 472:	4f 93       	push	r20
 474:	3f 93       	push	r19
 476:	10 b3       	in	r17, 0x10	; 16
 478:	4f ef       	ldi	r20, 0xFF	; 255
 47a:	01 27       	eor	r16, r17
 47c:	04 fb       	bst	r16, 4
 47e:	21 f9       	bld	r18, 1
 480:	3b e0       	ldi	r19, 0x0B	; 11
 482:	31 c0       	rjmp	.+98     	; 0x4e6 <rxbit2>

00000484 <unstuff0>:
 484:	4e 7f       	andi	r20, 0xFE	; 254
 486:	01 2f       	mov	r16, r17
 488:	10 b3       	in	r17, 0x10	; 16
 48a:	21 60       	ori	r18, 0x01	; 1
 48c:	28 c0       	rjmp	.+80     	; 0x4de <didUnstuff0>

0000048e <unstuff1>:
 48e:	10 2f       	mov	r17, r16
 490:	4d 7f       	andi	r20, 0xFD	; 253
 492:	22 60       	ori	r18, 0x02	; 2
 494:	00 00       	nop
 496:	00 b3       	in	r16, 0x10	; 16
 498:	29 c0       	rjmp	.+82     	; 0x4ec <didUnstuff1>

0000049a <unstuff2>:
 49a:	4b 7f       	andi	r20, 0xFB	; 251
 49c:	24 60       	ori	r18, 0x04	; 4
 49e:	01 2f       	mov	r16, r17
 4a0:	00 00       	nop
 4a2:	10 b3       	in	r17, 0x10	; 16
 4a4:	2b c0       	rjmp	.+86     	; 0x4fc <didUnstuff2>

000004a6 <unstuff3>:
 4a6:	10 b3       	in	r17, 0x10	; 16
 4a8:	47 7f       	andi	r20, 0xF7	; 247
 4aa:	28 60       	ori	r18, 0x08	; 8
 4ac:	2a c0       	rjmp	.+84     	; 0x502 <didUnstuff3>

000004ae <unstuff4>:
 4ae:	4f 7e       	andi	r20, 0xEF	; 239
 4b0:	00 b3       	in	r16, 0x10	; 16
 4b2:	20 61       	ori	r18, 0x10	; 16
 4b4:	2c c0       	rjmp	.+88     	; 0x50e <didUnstuff4>

000004b6 <unstuff5>:
 4b6:	4f 7d       	andi	r20, 0xDF	; 223
 4b8:	10 b3       	in	r17, 0x10	; 16
 4ba:	20 62       	ori	r18, 0x20	; 32
 4bc:	2f c0       	rjmp	.+94     	; 0x51c <didUnstuff5>

000004be <unstuff6>:
 4be:	4f 7b       	andi	r20, 0xBF	; 191
 4c0:	00 b3       	in	r16, 0x10	; 16
 4c2:	20 64       	ori	r18, 0x40	; 64
 4c4:	32 c0       	rjmp	.+100    	; 0x52a <didUnstuff6>

000004c6 <rxLoop>:
 4c6:	42 27       	eor	r20, r18
 4c8:	00 b3       	in	r16, 0x10	; 16
 4ca:	49 93       	st	Y+, r20
 4cc:	4f ef       	ldi	r20, 0xFF	; 255
 4ce:	00 00       	nop
 4d0:	10 27       	eor	r17, r16
 4d2:	14 fb       	bst	r17, 4
 4d4:	20 f9       	bld	r18, 0
 4d6:	10 b3       	in	r17, 0x10	; 16
 4d8:	14 71       	andi	r17, 0x14	; 20
 4da:	c9 f1       	breq	.+114    	; 0x54e <se0>
 4dc:	29 7f       	andi	r18, 0xF9	; 249

000004de <didUnstuff0>:
 4de:	91 f2       	breq	.-92     	; 0x484 <unstuff0>
 4e0:	01 27       	eor	r16, r17
 4e2:	04 fb       	bst	r16, 4
 4e4:	21 f9       	bld	r18, 1

000004e6 <rxbit2>:
 4e6:	00 b3       	in	r16, 0x10	; 16
 4e8:	23 7f       	andi	r18, 0xF3	; 243
 4ea:	89 f2       	breq	.-94     	; 0x48e <unstuff1>

000004ec <didUnstuff1>:
 4ec:	31 50       	subi	r19, 0x01	; 1
 4ee:	58 f1       	brcs	.+86     	; 0x546 <overflow>
 4f0:	10 27       	eor	r17, r16
 4f2:	14 fb       	bst	r17, 4
 4f4:	22 f9       	bld	r18, 2
 4f6:	10 b3       	in	r17, 0x10	; 16
 4f8:	27 7e       	andi	r18, 0xE7	; 231
 4fa:	79 f2       	breq	.-98     	; 0x49a <unstuff2>

000004fc <didUnstuff2>:
 4fc:	01 27       	eor	r16, r17
 4fe:	04 fb       	bst	r16, 4
 500:	23 f9       	bld	r18, 3

00000502 <didUnstuff3>:
 502:	2f 7c       	andi	r18, 0xCF	; 207
 504:	81 f2       	breq	.-96     	; 0x4a6 <unstuff3>
 506:	00 b3       	in	r16, 0x10	; 16
 508:	10 27       	eor	r17, r16
 50a:	14 fb       	bst	r17, 4
 50c:	24 f9       	bld	r18, 4

0000050e <didUnstuff4>:
 50e:	2f 79       	andi	r18, 0x9F	; 159
 510:	71 f2       	breq	.-100    	; 0x4ae <unstuff4>
 512:	00 c0       	rjmp	.+0      	; 0x514 <didUnstuff4+0x6>
 514:	10 b3       	in	r17, 0x10	; 16
 516:	01 27       	eor	r16, r17
 518:	04 fb       	bst	r16, 4
 51a:	25 f9       	bld	r18, 5

0000051c <didUnstuff5>:
 51c:	2f 73       	andi	r18, 0x3F	; 63
 51e:	59 f2       	breq	.-106    	; 0x4b6 <unstuff5>
 520:	00 c0       	rjmp	.+0      	; 0x522 <didUnstuff5+0x6>
 522:	00 b3       	in	r16, 0x10	; 16
 524:	10 27       	eor	r17, r16
 526:	14 fb       	bst	r17, 4
 528:	26 f9       	bld	r18, 6

0000052a <didUnstuff6>:
 52a:	22 30       	cpi	r18, 0x02	; 2
 52c:	40 f2       	brcs	.-112    	; 0x4be <unstuff6>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <didUnstuff6+0x6>
 530:	10 b3       	in	r17, 0x10	; 16
 532:	01 27       	eor	r16, r17
 534:	04 fb       	bst	r16, 4
 536:	27 f9       	bld	r18, 7

00000538 <didUnstuff7>:
 538:	24 30       	cpi	r18, 0x04	; 4
 53a:	28 f6       	brcc	.-118    	; 0x4c6 <rxLoop>

0000053c <unstuff7>:
 53c:	4f 77       	andi	r20, 0x7F	; 127
 53e:	20 68       	ori	r18, 0x80	; 128
 540:	10 b3       	in	r17, 0x10	; 16
 542:	00 00       	nop
 544:	f9 cf       	rjmp	.-14     	; 0x538 <didUnstuff7>

00000546 <overflow>:
 546:	10 e4       	ldi	r17, 0x40	; 64
 548:	1a bf       	out	0x3a, r17	; 58

0000054a <ignorePacket>:
 54a:	00 27       	eor	r16, r16
 54c:	17 c0       	rjmp	.+46     	; 0x57c <handleSetupOrOut>

0000054e <se0>:
 54e:	3b 50       	subi	r19, 0x0B	; 11
 550:	31 95       	neg	r19
 552:	c3 1b       	sub	r28, r19
 554:	d0 40       	sbci	r29, 0x00	; 0
 556:	10 e4       	ldi	r17, 0x40	; 64
 558:	1a bf       	out	0x3a, r17	; 58
 55a:	08 81       	ld	r16, Y
 55c:	03 3c       	cpi	r16, 0xC3	; 195
 55e:	e9 f0       	breq	.+58     	; 0x59a <handleData>
 560:	0b 34       	cpi	r16, 0x4B	; 75
 562:	d9 f0       	breq	.+54     	; 0x59a <handleData>
 564:	20 91 83 00 	lds	r18, 0x0083
 568:	19 81       	ldd	r17, Y+1	; 0x01
 56a:	11 0f       	add	r17, r17
 56c:	12 13       	cpse	r17, r18
 56e:	ed cf       	rjmp	.-38     	; 0x54a <ignorePacket>
 570:	09 36       	cpi	r16, 0x69	; 105
 572:	41 f1       	breq	.+80     	; 0x5c4 <handleIn>
 574:	0d 32       	cpi	r16, 0x2D	; 45
 576:	11 f0       	breq	.+4      	; 0x57c <handleSetupOrOut>
 578:	01 3e       	cpi	r16, 0xE1	; 225
 57a:	39 f7       	brne	.-50     	; 0x54a <ignorePacket>

0000057c <handleSetupOrOut>:
 57c:	00 93 8a 00 	sts	0x008A, r16

00000580 <doReturn>:
 580:	3f 91       	pop	r19
 582:	4f 91       	pop	r20
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	2f 91       	pop	r18
 58a:	df 91       	pop	r29
 58c:	ca b7       	in	r28, 0x3a	; 58
 58e:	c6 fd       	sbrc	r28, 6
 590:	51 cf       	rjmp	.-350    	; 0x434 <waitForJ>

00000592 <sofError>:
 592:	cf 91       	pop	r28
 594:	cf bf       	out	0x3f, r28	; 63
 596:	cf 91       	pop	r28
 598:	18 95       	reti

0000059a <handleData>:
 59a:	20 91 8a 00 	lds	r18, 0x008A
 59e:	22 23       	and	r18, r18
 5a0:	79 f3       	breq	.-34     	; 0x580 <doReturn>
 5a2:	10 91 88 00 	lds	r17, 0x0088
 5a6:	11 23       	and	r17, r17
 5a8:	11 f5       	brne	.+68     	; 0x5ee <sendNakAndReti>
 5aa:	34 30       	cpi	r19, 0x04	; 4
 5ac:	12 f1       	brmi	.+68     	; 0x5f2 <sendAckAndReti>
 5ae:	30 93 88 00 	sts	0x0088, r19
 5b2:	20 93 84 00 	sts	0x0084, r18
 5b6:	10 91 85 00 	lds	r17, 0x0085
 5ba:	3b e0       	ldi	r19, 0x0B	; 11
 5bc:	31 1b       	sub	r19, r17
 5be:	30 93 85 00 	sts	0x0085, r19
 5c2:	17 c0       	rjmp	.+46     	; 0x5f2 <sendAckAndReti>

000005c4 <handleIn>:
 5c4:	00 91 88 00 	lds	r16, 0x0088
 5c8:	01 30       	cpi	r16, 0x01	; 1
 5ca:	8c f4       	brge	.+34     	; 0x5ee <sendNakAndReti>
 5cc:	0a e5       	ldi	r16, 0x5A	; 90
 5ce:	30 91 62 00 	lds	r19, 0x0062
 5d2:	34 fd       	sbrc	r19, 4
 5d4:	10 c0       	rjmp	.+32     	; 0x5f6 <sendCntAndReti>
 5d6:	00 93 62 00 	sts	0x0062, r16
 5da:	cc e6       	ldi	r28, 0x6C	; 108
 5dc:	d0 e0       	ldi	r29, 0x00	; 0
 5de:	0f c0       	rjmp	.+30     	; 0x5fe <usbSendAndReti>

000005e0 <stuffN1Delay>:
 5e0:	27 95       	ror	r18
 5e2:	a8 f4       	brcc	.+42     	; 0x60e <doExorN1>
 5e4:	51 50       	subi	r21, 0x01	; 1
 5e6:	a9 f4       	brne	.+42     	; 0x612 <commonN1>
 5e8:	22 0f       	add	r18, r18
 5ea:	00 00       	nop
 5ec:	f9 cf       	rjmp	.-14     	; 0x5e0 <stuffN1Delay>

000005ee <sendNakAndReti>:
 5ee:	4a e5       	ldi	r20, 0x5A	; 90
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <usbSendX3>

000005f2 <sendAckAndReti>:
 5f2:	42 ed       	ldi	r20, 0xD2	; 210
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <usbSendX3>

000005f6 <sendCntAndReti>:
 5f6:	43 2f       	mov	r20, r19

000005f8 <usbSendX3>:
 5f8:	c4 e1       	ldi	r28, 0x14	; 20
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	32 e0       	ldi	r19, 0x02	; 2

000005fe <usbSendAndReti>:
 5fe:	11 b3       	in	r17, 0x11	; 17
 600:	14 61       	ori	r17, 0x14	; 20
 602:	94 9a       	sbi	0x12, 4	; 18
 604:	11 bb       	out	0x11, r17	; 17
 606:	02 b3       	in	r16, 0x12	; 18
 608:	20 e4       	ldi	r18, 0x40	; 64
 60a:	14 e1       	ldi	r17, 0x14	; 20
 60c:	5f 93       	push	r21

0000060e <doExorN1>:
 60e:	01 27       	eor	r16, r17
 610:	56 e0       	ldi	r21, 0x06	; 6

00000612 <commonN1>:
 612:	02 bb       	out	0x12, r16	; 18
 614:	27 95       	ror	r18
 616:	20 f4       	brcc	.+8      	; 0x620 <doExorN2>
 618:	51 50       	subi	r21, 0x01	; 1
 61a:	21 f4       	brne	.+8      	; 0x624 <commonN2>
 61c:	22 0f       	add	r18, r18
 61e:	f9 cf       	rjmp	.-14     	; 0x612 <commonN1>

00000620 <doExorN2>:
 620:	01 27       	eor	r16, r17
 622:	56 e0       	ldi	r21, 0x06	; 6

00000624 <commonN2>:
 624:	00 00       	nop
 626:	3b 5a       	subi	r19, 0xAB	; 171
 628:	02 bb       	out	0x12, r16	; 18
 62a:	d0 f2       	brcs	.-76     	; 0x5e0 <stuffN1Delay>

0000062c <stuff6Delay>:
 62c:	27 95       	ror	r18
 62e:	28 f4       	brcc	.+10     	; 0x63a <doExor6>
 630:	51 50       	subi	r21, 0x01	; 1
 632:	29 f4       	brne	.+10     	; 0x63e <common6>
 634:	22 0f       	add	r18, r18
 636:	00 00       	nop
 638:	f9 cf       	rjmp	.-14     	; 0x62c <stuff6Delay>

0000063a <doExor6>:
 63a:	01 27       	eor	r16, r17
 63c:	56 e0       	ldi	r21, 0x06	; 6

0000063e <common6>:
 63e:	27 95       	ror	r18
 640:	02 bb       	out	0x12, r16	; 18
 642:	20 f4       	brcc	.+8      	; 0x64c <doExor7>
 644:	51 50       	subi	r21, 0x01	; 1
 646:	21 f4       	brne	.+8      	; 0x650 <common7>
 648:	22 0f       	add	r18, r18
 64a:	f9 cf       	rjmp	.-14     	; 0x63e <common6>

0000064c <doExor7>:
 64c:	01 27       	eor	r16, r17
 64e:	56 e0       	ldi	r21, 0x06	; 6

00000650 <common7>:
 650:	29 91       	ld	r18, Y+
 652:	33 23       	and	r19, r19
 654:	02 bb       	out	0x12, r16	; 18
 656:	21 f6       	brne	.-120    	; 0x5e0 <stuffN1Delay>
 658:	0b 7e       	andi	r16, 0xEB	; 235
 65a:	10 91 89 00 	lds	r17, 0x0089
 65e:	11 0f       	add	r17, r17
 660:	c6 51       	subi	r28, 0x16	; 22
 662:	d0 40       	sbci	r29, 0x00	; 0
 664:	02 bb       	out	0x12, r16	; 18
 666:	11 f0       	breq	.+4      	; 0x66c <skipAddrAssign>
 668:	10 93 83 00 	sts	0x0083, r17

0000066c <skipAddrAssign>:
 66c:	10 e4       	ldi	r17, 0x40	; 64
 66e:	1a bf       	out	0x3a, r17	; 58
 670:	00 61       	ori	r16, 0x10	; 16
 672:	11 b3       	in	r17, 0x11	; 17
 674:	1b 7e       	andi	r17, 0xEB	; 235
 676:	40 2f       	mov	r20, r16
 678:	4b 7e       	andi	r20, 0xEB	; 235
 67a:	5f 91       	pop	r21
 67c:	00 c0       	rjmp	.+0      	; 0x67e <skipAddrAssign+0x12>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <skipAddrAssign+0x14>
 680:	02 bb       	out	0x12, r16	; 18
 682:	11 bb       	out	0x11, r17	; 17
 684:	42 bb       	out	0x12, r20	; 18
 686:	7c cf       	rjmp	.-264    	; 0x580 <doReturn>

00000688 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 688:	85 b7       	in	r24, 0x35	; 53
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 68e:	8b b7       	in	r24, 0x3b	; 59
 690:	80 64       	ori	r24, 0x40	; 64
 692:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 694:	8b e4       	ldi	r24, 0x4B	; 75
 696:	80 93 78 00 	sts	0x0078, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 69a:	8a e5       	ldi	r24, 0x5A	; 90
 69c:	80 93 77 00 	sts	0x0077, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 6a0:	08 95       	ret

000006a2 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 6a8:	90 91 88 00 	lds	r25, 0x0088
 6ac:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 6ae:	97 fd       	sbrc	r25, 7
 6b0:	a2 c0       	rjmp	.+324    	; 0x7f6 <usbPoll+0x154>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6b2:	20 91 85 00 	lds	r18, 0x0085
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 6b6:	80 91 84 00 	lds	r24, 0x0084
 6ba:	8d 32       	cpi	r24, 0x2D	; 45
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <usbPoll+0x1e>
 6be:	99 c0       	rjmp	.+306    	; 0x7f2 <usbPoll+0x150>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 6c0:	98 30       	cpi	r25, 0x08	; 8
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <usbPoll+0x24>
 6c4:	96 c0       	rjmp	.+300    	; 0x7f2 <usbPoll+0x150>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6c6:	cc e0       	ldi	r28, 0x0C	; 12
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	c2 1b       	sub	r28, r18
 6cc:	d1 09       	sbc	r29, r1
 6ce:	c4 57       	subi	r28, 0x74	; 116
 6d0:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6d2:	83 ec       	ldi	r24, 0xC3	; 195
 6d4:	80 93 6c 00 	sts	0x006C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6d8:	8a e5       	ldi	r24, 0x5A	; 90
 6da:	80 93 62 00 	sts	0x0062, r24
        usbMsgFlags = 0;
 6de:	10 92 6b 00 	sts	0x006B, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6e2:	88 81       	ld	r24, Y
 6e4:	80 76       	andi	r24, 0x60	; 96
 6e6:	29 f0       	breq	.+10     	; 0x6f2 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 6e8:	ce 01       	movw	r24, r28
 6ea:	0e 94 80 01 	call	0x300	; 0x300 <usbFunctionSetup>
 6ee:	28 2f       	mov	r18, r24
 6f0:	77 c0       	rjmp	.+238    	; 0x7e0 <usbPoll+0x13e>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6f2:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6f4:	10 92 75 00 	sts	0x0075, r1
    SWITCH_START(rq->bRequest)
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6fa:	88 23       	and	r24, r24
 6fc:	21 f4       	brne	.+8      	; 0x706 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6fe:	10 92 76 00 	sts	0x0076, r1
 702:	22 e0       	ldi	r18, 0x02	; 2
 704:	67 c0       	rjmp	.+206    	; 0x7d4 <usbPoll+0x132>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 706:	85 30       	cpi	r24, 0x05	; 5
 708:	19 f4       	brne	.+6      	; 0x710 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 70a:	90 93 89 00 	sts	0x0089, r25
 70e:	61 c0       	rjmp	.+194    	; 0x7d2 <usbPoll+0x130>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 710:	86 30       	cpi	r24, 0x06	; 6
 712:	09 f0       	breq	.+2      	; 0x716 <usbPoll+0x74>
 714:	4a c0       	rjmp	.+148    	; 0x7aa <usbPoll+0x108>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 716:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	19 f4       	brne	.+6      	; 0x722 <usbPoll+0x80>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 71c:	8a ea       	ldi	r24, 0xAA	; 170
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	1b c0       	rjmp	.+54     	; 0x758 <usbPoll+0xb6>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 722:	82 30       	cpi	r24, 0x02	; 2
 724:	41 f4       	brne	.+16     	; 0x736 <usbPoll+0x94>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 726:	8c eb       	ldi	r24, 0xBC	; 188
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	90 93 87 00 	sts	0x0087, r25
 72e:	80 93 86 00 	sts	0x0086, r24
 732:	22 e2       	ldi	r18, 0x22	; 34
 734:	36 c0       	rjmp	.+108    	; 0x7a2 <usbPoll+0x100>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	f9 f4       	brne	.+62     	; 0x778 <usbPoll+0xd6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 73c:	88 23       	and	r24, r24
 73e:	41 f4       	brne	.+16     	; 0x750 <usbPoll+0xae>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 740:	88 e8       	ldi	r24, 0x88	; 136
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	90 93 87 00 	sts	0x0087, r25
 748:	80 93 86 00 	sts	0x0086, r24
 74c:	24 e0       	ldi	r18, 0x04	; 4
 74e:	29 c0       	rjmp	.+82     	; 0x7a2 <usbPoll+0x100>
        SWITCH_CASE(1)
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	41 f4       	brne	.+16     	; 0x764 <usbPoll+0xc2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 754:	8c e8       	ldi	r24, 0x8C	; 140
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 87 00 	sts	0x0087, r25
 75c:	80 93 86 00 	sts	0x0086, r24
 760:	22 e1       	ldi	r18, 0x12	; 18
 762:	1f c0       	rjmp	.+62     	; 0x7a2 <usbPoll+0x100>
        SWITCH_CASE(2)
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	e1 f4       	brne	.+56     	; 0x7a0 <usbPoll+0xfe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 768:	8e e9       	ldi	r24, 0x9E	; 158
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 87 00 	sts	0x0087, r25
 770:	80 93 86 00 	sts	0x0086, r24
 774:	2c e0       	ldi	r18, 0x0C	; 12
 776:	15 c0       	rjmp	.+42     	; 0x7a2 <usbPoll+0x100>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 778:	81 32       	cpi	r24, 0x21	; 33
 77a:	41 f4       	brne	.+16     	; 0x78c <usbPoll+0xea>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 77c:	8e ec       	ldi	r24, 0xCE	; 206
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	90 93 87 00 	sts	0x0087, r25
 784:	80 93 86 00 	sts	0x0086, r24
 788:	29 e0       	ldi	r18, 0x09	; 9
 78a:	0b c0       	rjmp	.+22     	; 0x7a2 <usbPoll+0x100>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 78c:	82 32       	cpi	r24, 0x22	; 34
 78e:	41 f4       	brne	.+16     	; 0x7a0 <usbPoll+0xfe>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 790:	84 e5       	ldi	r24, 0x54	; 84
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	90 93 87 00 	sts	0x0087, r25
 798:	80 93 86 00 	sts	0x0086, r24
 79c:	24 e3       	ldi	r18, 0x34	; 52
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <usbPoll+0x100>
 7a0:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 7a2:	80 e4       	ldi	r24, 0x40	; 64
 7a4:	80 93 6b 00 	sts	0x006B, r24
 7a8:	1b c0       	rjmp	.+54     	; 0x7e0 <usbPoll+0x13e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 7aa:	88 30       	cpi	r24, 0x08	; 8
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <usbPoll+0x114>
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	8b e8       	ldi	r24, 0x8B	; 139
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <usbPoll+0x136>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 7b6:	89 30       	cpi	r24, 0x09	; 9
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <usbPoll+0x11e>
        usbConfiguration = value;
 7ba:	90 93 8b 00 	sts	0x008B, r25
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <usbPoll+0x130>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 7c0:	8a 30       	cpi	r24, 0x0A	; 10
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <usbPoll+0x126>
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <usbPoll+0x132>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 7c8:	8b 30       	cpi	r24, 0x0B	; 11
 7ca:	19 f4       	brne	.+6      	; 0x7d2 <usbPoll+0x130>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7cc:	8b e4       	ldi	r24, 0x4B	; 75
 7ce:	80 93 78 00 	sts	0x0078, r24
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	85 e7       	ldi	r24, 0x75	; 117
 7d6:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 7d8:	90 93 87 00 	sts	0x0087, r25
 7dc:	80 93 86 00 	sts	0x0086, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7e0:	8f 81       	ldd	r24, Y+7	; 0x07
 7e2:	88 23       	and	r24, r24
 7e4:	21 f4       	brne	.+8      	; 0x7ee <usbPoll+0x14c>
 7e6:	8e 81       	ldd	r24, Y+6	; 0x06
 7e8:	82 17       	cp	r24, r18
 7ea:	08 f4       	brcc	.+2      	; 0x7ee <usbPoll+0x14c>
 7ec:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7ee:	20 93 63 00 	sts	0x0063, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 7f2:	10 92 88 00 	sts	0x0088, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 7f6:	80 91 62 00 	lds	r24, 0x0062
 7fa:	84 ff       	sbrs	r24, 4
 7fc:	4a c0       	rjmp	.+148    	; 0x892 <usbPoll+0x1f0>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 7fe:	80 91 63 00 	lds	r24, 0x0063
 802:	8f 3f       	cpi	r24, 0xFF	; 255
 804:	09 f4       	brne	.+2      	; 0x808 <usbPoll+0x166>
 806:	45 c0       	rjmp	.+138    	; 0x892 <usbPoll+0x1f0>
 808:	18 2f       	mov	r17, r24
 80a:	89 30       	cpi	r24, 0x09	; 9
 80c:	08 f0       	brcs	.+2      	; 0x810 <usbPoll+0x16e>
 80e:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 810:	81 1b       	sub	r24, r17
 812:	80 93 63 00 	sts	0x0063, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 816:	80 91 6c 00 	lds	r24, 0x006C
 81a:	98 e8       	ldi	r25, 0x88	; 136
 81c:	89 27       	eor	r24, r25
 81e:	80 93 6c 00 	sts	0x006C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 822:	11 23       	and	r17, r17
 824:	41 f1       	breq	.+80     	; 0x876 <usbPoll+0x1d4>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 826:	20 91 86 00 	lds	r18, 0x0086
 82a:	30 91 87 00 	lds	r19, 0x0087
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 82e:	80 91 6b 00 	lds	r24, 0x006B
 832:	86 ff       	sbrs	r24, 6
 834:	0d c0       	rjmp	.+26     	; 0x850 <usbPoll+0x1ae>
 836:	ad e6       	ldi	r26, 0x6D	; 109
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 83e:	f9 01       	movw	r30, r18
 840:	e8 0f       	add	r30, r24
 842:	f9 1f       	adc	r31, r25
 844:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 846:	ed 93       	st	X+, r30
 848:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 84a:	18 17       	cp	r17, r24
 84c:	c1 f7       	brne	.-16     	; 0x83e <usbPoll+0x19c>
 84e:	08 c0       	rjmp	.+16     	; 0x860 <usbPoll+0x1be>
 850:	91 2f       	mov	r25, r17
 852:	d9 01       	movw	r26, r18
 854:	ed e6       	ldi	r30, 0x6D	; 109
 856:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 858:	8d 91       	ld	r24, X+
 85a:	81 93       	st	Z+, r24
                }while(--i);
 85c:	91 50       	subi	r25, 0x01	; 1
 85e:	e1 f7       	brne	.-8      	; 0x858 <usbPoll+0x1b6>
 860:	11 50       	subi	r17, 0x01	; 1
 862:	81 2f       	mov	r24, r17
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	1f 5f       	subi	r17, 0xFF	; 255
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	82 0f       	add	r24, r18
 86c:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 86e:	90 93 87 00 	sts	0x0087, r25
 872:	80 93 86 00 	sts	0x0086, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 876:	61 2f       	mov	r22, r17
 878:	8d e6       	ldi	r24, 0x6D	; 109
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 13 02 	call	0x426	; 0x426 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 880:	61 2f       	mov	r22, r17
 882:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 884:	6c 30       	cpi	r22, 0x0C	; 12
 886:	19 f0       	breq	.+6      	; 0x88e <usbPoll+0x1ec>
            usbMsgLen = USB_NO_MSG;
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	80 93 63 00 	sts	0x0063, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 88e:	60 93 62 00 	sts	0x0062, r22
 892:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 894:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 896:	84 71       	andi	r24, 0x14	; 20
 898:	31 f4       	brne	.+12     	; 0x8a6 <usbPoll+0x204>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	d9 f7       	brne	.-10     	; 0x894 <usbPoll+0x1f2>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 89e:	10 92 89 00 	sts	0x0089, r1
    usbDeviceAddr = 0;
 8a2:	10 92 83 00 	sts	0x0083, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	08 95       	ret

000008ae <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 8ae:	1f 93       	push	r17
 8b0:	dc 01       	movw	r26, r24
 8b2:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 8b4:	80 91 77 00 	lds	r24, 0x0077
 8b8:	84 ff       	sbrs	r24, 4
 8ba:	07 c0       	rjmp	.+14     	; 0x8ca <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 8bc:	80 91 78 00 	lds	r24, 0x0078
 8c0:	98 e8       	ldi	r25, 0x88	; 136
 8c2:	89 27       	eor	r24, r25
 8c4:	80 93 78 00 	sts	0x0078, r24
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 8ca:	8a e5       	ldi	r24, 0x5A	; 90
 8cc:	80 93 77 00 	sts	0x0077, r24
 8d0:	91 2f       	mov	r25, r17
 8d2:	e9 e7       	ldi	r30, 0x79	; 121
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 8d6:	8d 91       	ld	r24, X+
 8d8:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 8da:	91 50       	subi	r25, 0x01	; 1
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 8de:	61 2f       	mov	r22, r17
 8e0:	89 e7       	ldi	r24, 0x79	; 121
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 13 02 	call	0x426	; 0x426 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 8e8:	1c 5f       	subi	r17, 0xFC	; 252
 8ea:	10 93 77 00 	sts	0x0077, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 8ee:	1f 91       	pop	r17
 8f0:	08 95       	ret

000008f2 <__divmodhi4>:
 8f2:	97 fb       	bst	r25, 7
 8f4:	09 2e       	mov	r0, r25
 8f6:	07 26       	eor	r0, r23
 8f8:	0a d0       	rcall	.+20     	; 0x90e <__divmodhi4_neg1>
 8fa:	77 fd       	sbrc	r23, 7
 8fc:	04 d0       	rcall	.+8      	; 0x906 <__divmodhi4_neg2>
 8fe:	0c d0       	rcall	.+24     	; 0x918 <__udivmodhi4>
 900:	06 d0       	rcall	.+12     	; 0x90e <__divmodhi4_neg1>
 902:	00 20       	and	r0, r0
 904:	1a f4       	brpl	.+6      	; 0x90c <__divmodhi4_exit>

00000906 <__divmodhi4_neg2>:
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255

0000090c <__divmodhi4_exit>:
 90c:	08 95       	ret

0000090e <__divmodhi4_neg1>:
 90e:	f6 f7       	brtc	.-4      	; 0x90c <__divmodhi4_exit>
 910:	90 95       	com	r25
 912:	81 95       	neg	r24
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	08 95       	ret

00000918 <__udivmodhi4>:
 918:	aa 1b       	sub	r26, r26
 91a:	bb 1b       	sub	r27, r27
 91c:	51 e1       	ldi	r21, 0x11	; 17
 91e:	07 c0       	rjmp	.+14     	; 0x92e <__udivmodhi4_ep>

00000920 <__udivmodhi4_loop>:
 920:	aa 1f       	adc	r26, r26
 922:	bb 1f       	adc	r27, r27
 924:	a6 17       	cp	r26, r22
 926:	b7 07       	cpc	r27, r23
 928:	10 f0       	brcs	.+4      	; 0x92e <__udivmodhi4_ep>
 92a:	a6 1b       	sub	r26, r22
 92c:	b7 0b       	sbc	r27, r23

0000092e <__udivmodhi4_ep>:
 92e:	88 1f       	adc	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	5a 95       	dec	r21
 934:	a9 f7       	brne	.-22     	; 0x920 <__udivmodhi4_loop>
 936:	80 95       	com	r24
 938:	90 95       	com	r25
 93a:	bc 01       	movw	r22, r24
 93c:	cd 01       	movw	r24, r26
 93e:	08 95       	ret

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
