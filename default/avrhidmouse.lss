
avrhidmouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000038e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  000003a4  00000418  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a6  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f7  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039e  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  8a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	87 bb       	out	0x17, r24	; 23

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;

	//change LCD mode
	SET_RW();		//Read mode
  98:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
  9a:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	c6 9a       	sbi	0x18, 6	; 24
  a6:	82 2f       	mov	r24, r18
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  ac:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  ae:	82 95       	swap	r24
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	92 2f       	mov	r25, r18
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  b8:	c6 98       	cbi	0x18, 6	; 24
  ba:	92 2f       	mov	r25, r18
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
  c0:	c6 9a       	sbi	0x18, 6	; 24
  c2:	92 2f       	mov	r25, r18
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  c8:	96 b3       	in	r25, 0x16	; 22
  ca:	92 2f       	mov	r25, r18
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  d0:	c6 98       	cbi	0x18, 6	; 24
  d2:	92 2f       	mov	r25, r18
  d4:	9a 95       	dec	r25
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
  d8:	87 fd       	sbrc	r24, 7
  da:	e4 cf       	rjmp	.-56     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
  dc:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 60       	ori	r24, 0x0F	; 15
  e2:	87 bb       	out	0x17, r24	; 23

}
  e4:	08 95       	ret

000000e6 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
  e6:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
  e8:	66 23       	and	r22, r22
  ea:	11 f4       	brne	.+4      	; 0xf0 <LCDByte+0xa>
	CLEAR_RS();
  ec:	c4 98       	cbi	0x18, 4	; 24
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <LCDByte+0xc>
else
	SET_RS();
  f0:	c4 9a       	sbi	0x18, 4	; 24
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	82 2f       	mov	r24, r18
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
  fa:	c6 9a       	sbi	0x18, 6	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	93 2f       	mov	r25, r19
 100:	92 95       	swap	r25
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 108:	98 bb       	out	0x18, r25	; 24
 10a:	82 2f       	mov	r24, r18
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 110:	c6 98       	cbi	0x18, 6	; 24
 112:	82 2f       	mov	r24, r18
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 118:	c6 9a       	sbi	0x18, 6	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	3f 70       	andi	r19, 0x0F	; 15
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 122:	88 bb       	out	0x18, r24	; 24
 124:	82 2f       	mov	r24, r18
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 12a:	c6 98       	cbi	0x18, 6	; 24
 12c:	2a 95       	dec	r18
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 130:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
 134:	08 95       	ret

00000136 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 136:	1f 93       	push	r17
 138:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	8c e4       	ldi	r24, 0x4C	; 76
 13c:	9d e1       	ldi	r25, 0x1D	; 29
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 142:	87 b3       	in	r24, 0x17	; 23
 144:	8f 60       	ori	r24, 0x0F	; 15
 146:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 148:	be 9a       	sbi	0x17, 6	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 14a:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 14c:	bd 9a       	sbi	0x17, 5	; 23

	LCD_DATA_PORT&=0XF0;
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 154:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RW();
 156:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 158:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	98 2f       	mov	r25, r24
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 162:	c6 9a       	sbi	0x18, 6	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 164:	c1 9a       	sbi	0x18, 1	; 24
 166:	98 2f       	mov	r25, r24
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 16c:	c6 98       	cbi	0x18, 6	; 24
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 2f       	mov	r24, r17
 17a:	8c 60       	ori	r24, 0x0C	; 12
 17c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
}
 188:	1f 91       	pop	r17
 18a:	08 95       	ret

0000018c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	04 c0       	rjmp	.+8      	; 0x19c <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	msg++;
 19a:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	c9 f7       	brne	.-14     	; 0x194 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <LCDWriteInt+0xe>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <LCDWriteInt+0x10>
 1b8:	0f 92       	push	r0
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9c 01       	movw	r18, r24
 1c0:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 1c2:	fe 01       	movw	r30, r28
 1c4:	31 96       	adiw	r30, 0x01	; 1
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	df 01       	movw	r26, r30
 1ca:	1d 92       	st	X+, r1
 1cc:	8a 95       	dec	r24
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <LCDWriteInt+0x22>
 1d0:	fe 01       	movw	r30, r28
 1d2:	35 96       	adiw	r30, 0x05	; 5
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 1d6:	c9 01       	movw	r24, r18
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 9e 01 	call	0x33c	; 0x33c <__divmodhi4>
 1e0:	80 83       	st	Z, r24
	val=val/10;
 1e2:	c9 01       	movw	r24, r18
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 9e 01 	call	0x33c	; 0x33c <__divmodhi4>
 1ec:	9b 01       	movw	r18, r22
 1ee:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1f0:	21 15       	cp	r18, r1
 1f2:	31 05       	cpc	r19, r1
 1f4:	81 f7       	brne	.-32     	; 0x1d6 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1f6:	bf ef       	ldi	r27, 0xFF	; 255
 1f8:	0f 3f       	cpi	r16, 0xFF	; 255
 1fa:	1b 07       	cpc	r17, r27
 1fc:	79 f4       	brne	.+30     	; 0x21c <LCDWriteInt+0x74>
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 202:	ae 01       	movw	r20, r28
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCDWriteInt+0x66>
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	fa 01       	movw	r30, r20
 210:	e2 0f       	add	r30, r18
 212:	f3 1f       	adc	r31, r19
 214:	80 81       	ld	r24, Z
 216:	88 23       	and	r24, r24
 218:	c1 f3       	breq	.-16     	; 0x20a <LCDWriteInt+0x62>
 21a:	04 c0       	rjmp	.+8      	; 0x224 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 21c:	25 e0       	ldi	r18, 0x05	; 5
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	20 1b       	sub	r18, r16
 222:	31 0b       	sbc	r19, r17
 224:	7e 01       	movw	r14, r28
 226:	08 94       	sec
 228:	e1 1c       	adc	r14, r1
 22a:	f1 1c       	adc	r15, r1
 22c:	e2 0e       	add	r14, r18
 22e:	f3 1e       	adc	r15, r19
 230:	89 01       	movw	r16, r18
 232:	09 c0       	rjmp	.+18     	; 0x246 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 234:	f7 01       	movw	r30, r14
 236:	81 91       	ld	r24, Z+
 238:	7f 01       	movw	r14, r30
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	05 30       	cpi	r16, 0x05	; 5
 248:	11 05       	cpc	r17, r1
 24a:	a4 f3       	brlt	.-24     	; 0x234 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 264:	88 32       	cpi	r24, 0x28	; 40
 266:	30 f4       	brcc	.+12     	; 0x274 <LCDGotoXY+0x10>
 if(x<40)
 {
  if(y) x|=0b01000000;
 268:	61 11       	cpse	r22, r1
 26a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
 274:	08 95       	ret

00000276 <adc_init>:
#include<util/delay.h>		//header file for genarating time delay
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
 276:	87 e8       	ldi	r24, 0x87	; 135
 278:	86 b9       	out	0x06, r24	; 6
  ADCSRA=0X87;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 27a:	08 95       	ret

0000027c <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
 27c:	90 e6       	ldi	r25, 0x60	; 96
 27e:	97 b9       	out	0x07, r25	; 7
    ADMUX=0X60;						//right align the ADC result
    ADMUX|=chno;					//select the ADC channel
 280:	97 b1       	in	r25, 0x07	; 7
 282:	98 2b       	or	r25, r24
 284:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 286:	36 9a       	sbi	0x06, 6	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 288:	84 ec       	ldi	r24, 0xC4	; 196
 28a:	99 e0       	ldi	r25, 0x09	; 9
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <getdata+0x10>
    _delay_ms(10);					//give some time delay to complit the aDC convertion
	return ADCH;
 290:	85 b1       	in	r24, 0x05	; 5
  }
 292:	08 95       	ret

00000294 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.c"
#include "adc.h"
void main()
{
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
DDRC=0xff;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 bb       	out	0x14, r24	; 20
InitLCD(LS_ULINE);
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 9b 00 	call	0x136	; 0x136 <InitLCD>
LCDWriteString("Hello World");
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
#include<avr/interrupt.h>			//header file for using interrupt service routins
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X87;						//ADC enable, ADC interrupt enable, set prescaller to 64
 2b0:	87 e8       	ldi	r24, 0x87	; 135
 2b2:	86 b9       	out	0x06, r24	; 6
adc_init();
PORTC=0x00;
 2b4:	15 ba       	out	0x15, r1	; 21
 2b6:	89 e1       	ldi	r24, 0x19	; 25
 2b8:	e8 2e       	mov	r14, r24
 2ba:	f1 2c       	mov	r15, r1
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 2bc:	10 e6       	ldi	r17, 0x60	; 96
 2be:	c4 ec       	ldi	r28, 0xC4	; 196
 2c0:	d9 e0       	ldi	r29, 0x09	; 9
while(1)
{
LCDClear();
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	93 e1       	ldi	r25, 0x13	; 19
 2ce:	f7 01       	movw	r30, r14
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0x3a>

_delay_ms(500);
LCDWriteString("x=");
 2d8:	8c e6       	ldi	r24, 0x6C	; 108
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
 2e0:	17 b9       	out	0x07, r17	; 7
    ADMUX|=chno;					//select the ADC channel
 2e2:	87 b1       	in	r24, 0x07	; 7
 2e4:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 2e6:	36 9a       	sbi	0x06, 6	; 6
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x56>
    _delay_ms(10);					//give some time delay to complit the aDC convertion
	return ADCH;
 2ee:	85 b1       	in	r24, 0x05	; 5
LCDWriteInt(getdata(0),4);
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>

LCDWriteString("y=");
 2fa:	8f e6       	ldi	r24, 0x6F	; 111
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
  ADCSRA=0X87;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 302:	17 b9       	out	0x07, r17	; 7
    ADMUX|=chno;					//select the ADC channel
 304:	38 9a       	sbi	0x07, 0	; 7
    ADCSRA|=0X40;					//start ADC convertion
 306:	36 9a       	sbi	0x06, 6	; 6
 308:	ce 01       	movw	r24, r28
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x76>
    _delay_ms(10);					//give some time delay to complit the aDC convertion
	return ADCH;
 30e:	85 b1       	in	r24, 0x05	; 5
LCDWriteInt(getdata(1),4);
 310:	64 e0       	ldi	r22, 0x04	; 4
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>


LCDWriteString("z=");
 31a:	82 e7       	ldi	r24, 0x72	; 114
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
  ADCSRA=0X87;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 322:	17 b9       	out	0x07, r17	; 7
    ADMUX|=chno;					//select the ADC channel
 324:	39 9a       	sbi	0x07, 1	; 7
    ADCSRA|=0X40;					//start ADC convertion
 326:	36 9a       	sbi	0x06, 6	; 6
 328:	ce 01       	movw	r24, r28
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x96>
    _delay_ms(10);					//give some time delay to complit the aDC convertion
	return ADCH;
 32e:	85 b1       	in	r24, 0x05	; 5
LCDWriteInt(getdata(2),4);
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
 33a:	c3 cf       	rjmp	.-122    	; 0x2c2 <main+0x2e>

0000033c <__divmodhi4>:
 33c:	97 fb       	bst	r25, 7
 33e:	09 2e       	mov	r0, r25
 340:	07 26       	eor	r0, r23
 342:	0a d0       	rcall	.+20     	; 0x358 <__divmodhi4_neg1>
 344:	77 fd       	sbrc	r23, 7
 346:	04 d0       	rcall	.+8      	; 0x350 <__divmodhi4_neg2>
 348:	0c d0       	rcall	.+24     	; 0x362 <__udivmodhi4>
 34a:	06 d0       	rcall	.+12     	; 0x358 <__divmodhi4_neg1>
 34c:	00 20       	and	r0, r0
 34e:	1a f4       	brpl	.+6      	; 0x356 <__divmodhi4_exit>

00000350 <__divmodhi4_neg2>:
 350:	70 95       	com	r23
 352:	61 95       	neg	r22
 354:	7f 4f       	sbci	r23, 0xFF	; 255

00000356 <__divmodhi4_exit>:
 356:	08 95       	ret

00000358 <__divmodhi4_neg1>:
 358:	f6 f7       	brtc	.-4      	; 0x356 <__divmodhi4_exit>
 35a:	90 95       	com	r25
 35c:	81 95       	neg	r24
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	08 95       	ret

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
