
avrhidmouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000090e  00000982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800064  00000912  00000986  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a1  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000867  00000000  00000000  0000230f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000618  00000000  00000000  00003131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003749  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
   4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_1>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000054 <usbHidReportDescriptor>:
  54:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  64:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 03     ..%...u.....u...
  74:	05 01 09 30 09 31 09 38 15 81 25 7f 75 08 95 03     ...0.1.8..%.u...
  84:	81 06 c0 c0                                         ....

00000088 <usbDescriptorString0>:
  88:	04 03 09 04                                         ....

0000008c <usbDescriptorStringVendor>:
  8c:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  9c:	74 00                                               t.

0000009e <usbDescriptorStringDevice>:
  9e:	12 03 54 00 65 00 6d 00 70 00 6c 00 61 00 74 00     ..T.e.m.p.l.a.t.
  ae:	65 00                                               e.

000000b0 <usbDescriptorDevice>:
  b0:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
  c0:	00 01                                               ..

000000c2 <usbDescriptorConfiguration>:
  c2:	09 02 19 00 01 01 00 80 32 09 04 00 00 01 00 00     ........2.......
  d2:	00 00 07 05 81 03 08 00 0a 00                       ..........

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf e5       	ldi	r28, 0x5F	; 95
  e2:	d4 e0       	ldi	r29, 0x04	; 4
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	a0 e6       	ldi	r26, 0x60	; 96
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ee e0       	ldi	r30, 0x0E	; 14
  f0:	f9 e0       	ldi	r31, 0x09	; 9
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <.do_copy_data_start>

000000f4 <.do_copy_data_loop>:
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0

000000f8 <.do_copy_data_start>:
  f8:	a4 36       	cpi	r26, 0x64	; 100
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <.do_copy_data_loop>

000000fe <__do_clear_bss>:
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	a4 e6       	ldi	r26, 0x64	; 100
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	a2 3a       	cpi	r26, 0xA2	; 162
 10a:	b1 07       	cpc	r27, r17
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	0e 94 a2 01 	call	0x344	; 0x344 <main>
 112:	0c 94 85 04 	jmp	0x90a	; 0x90a <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	87 bb       	out	0x17, r24	; 23

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;

	//change LCD mode
	SET_RW();		//Read mode
 120:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
 122:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	c6 9a       	sbi	0x18, 6	; 24
 12e:	82 2f       	mov	r24, r18
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 134:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 136:	82 95       	swap	r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	92 2f       	mov	r25, r18
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 140:	c6 98       	cbi	0x18, 6	; 24
 142:	92 2f       	mov	r25, r18
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 148:	c6 9a       	sbi	0x18, 6	; 24
 14a:	92 2f       	mov	r25, r18
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 150:	96 b3       	in	r25, 0x16	; 22
 152:	92 2f       	mov	r25, r18
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 158:	c6 98       	cbi	0x18, 6	; 24
 15a:	92 2f       	mov	r25, r18
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 160:	87 fd       	sbrc	r24, 7
 162:	e4 cf       	rjmp	.-56     	; 0x12c <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 164:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 166:	87 b3       	in	r24, 0x17	; 23
 168:	8f 60       	ori	r24, 0x0F	; 15
 16a:	87 bb       	out	0x17, r24	; 23

}
 16c:	08 95       	ret

0000016e <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 16e:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 170:	66 23       	and	r22, r22
 172:	11 f4       	brne	.+4      	; 0x178 <LCDByte+0xa>
	CLEAR_RS();
 174:	c4 98       	cbi	0x18, 4	; 24
 176:	01 c0       	rjmp	.+2      	; 0x17a <LCDByte+0xc>
else
	SET_RS();
 178:	c4 9a       	sbi	0x18, 4	; 24
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	82 2f       	mov	r24, r18
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 182:	c6 9a       	sbi	0x18, 6	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 184:	88 b3       	in	r24, 0x18	; 24
 186:	93 2f       	mov	r25, r19
 188:	92 95       	swap	r25
 18a:	9f 70       	andi	r25, 0x0F	; 15
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 190:	98 bb       	out	0x18, r25	; 24
 192:	82 2f       	mov	r24, r18
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 198:	c6 98       	cbi	0x18, 6	; 24
 19a:	82 2f       	mov	r24, r18
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a0:	c6 9a       	sbi	0x18, 6	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	3f 70       	andi	r19, 0x0F	; 15
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	82 2f       	mov	r24, r18
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1b2:	c6 98       	cbi	0x18, 6	; 24
 1b4:	2a 95       	dec	r18
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1b8:	0e 94 8d 00 	call	0x11a	; 0x11a <LCDBusyLoop>
}
 1bc:	08 95       	ret

000001be <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1be:	1f 93       	push	r17
 1c0:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c2:	8c e4       	ldi	r24, 0x4C	; 76
 1c4:	9d e1       	ldi	r25, 0x1D	; 29
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1ca:	87 b3       	in	r24, 0x17	; 23
 1cc:	8f 60       	ori	r24, 0x0F	; 15
 1ce:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 1d0:	be 9a       	sbi	0x17, 6	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1d2:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1d4:	bd 9a       	sbi	0x17, 5	; 23

	LCD_DATA_PORT&=0XF0;
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 1dc:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RW();
 1de:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 1e0:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	98 2f       	mov	r25, r24
 1e6:	9a 95       	dec	r25
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1ea:	c6 9a       	sbi	0x18, 6	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1ec:	c1 9a       	sbi	0x18, 1	; 24
 1ee:	98 2f       	mov	r25, r24
 1f0:	9a 95       	dec	r25
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 1f4:	c6 98       	cbi	0x18, 6	; 24
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1fa:	0e 94 8d 00 	call	0x11a	; 0x11a <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	81 2f       	mov	r24, r17
 202:	8c 60       	ori	r24, 0x0C	; 12
 204:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDByte>
}
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	04 c0       	rjmp	.+8      	; 0x224 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDByte>
	msg++;
 222:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 224:	88 81       	ld	r24, Y
 226:	88 23       	and	r24, r24
 228:	c9 f7       	brne	.-14     	; 0x21c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <LCDWriteInt+0xe>
 23e:	00 d0       	rcall	.+0      	; 0x240 <LCDWriteInt+0x10>
 240:	0f 92       	push	r0
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9c 01       	movw	r18, r24
 248:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 24a:	fe 01       	movw	r30, r28
 24c:	31 96       	adiw	r30, 0x01	; 1
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	df 01       	movw	r26, r30
 252:	1d 92       	st	X+, r1
 254:	8a 95       	dec	r24
 256:	e9 f7       	brne	.-6      	; 0x252 <LCDWriteInt+0x22>
 258:	fe 01       	movw	r30, r28
 25a:	35 96       	adiw	r30, 0x05	; 5
 25c:	0d c0       	rjmp	.+26     	; 0x278 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 25e:	c9 01       	movw	r24, r18
 260:	6a e0       	ldi	r22, 0x0A	; 10
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__divmodhi4>
 268:	80 83       	st	Z, r24
	val=val/10;
 26a:	c9 01       	movw	r24, r18
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__divmodhi4>
 274:	9b 01       	movw	r18, r22
 276:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 278:	21 15       	cp	r18, r1
 27a:	31 05       	cpc	r19, r1
 27c:	81 f7       	brne	.-32     	; 0x25e <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 27e:	bf ef       	ldi	r27, 0xFF	; 255
 280:	0f 3f       	cpi	r16, 0xFF	; 255
 282:	1b 07       	cpc	r17, r27
 284:	79 f4       	brne	.+30     	; 0x2a4 <LCDWriteInt+0x74>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 28a:	ae 01       	movw	r20, r28
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	02 c0       	rjmp	.+4      	; 0x296 <LCDWriteInt+0x66>
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	fa 01       	movw	r30, r20
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	c1 f3       	breq	.-16     	; 0x292 <LCDWriteInt+0x62>
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2a4:	25 e0       	ldi	r18, 0x05	; 5
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	20 1b       	sub	r18, r16
 2aa:	31 0b       	sbc	r19, r17
 2ac:	7e 01       	movw	r14, r28
 2ae:	08 94       	sec
 2b0:	e1 1c       	adc	r14, r1
 2b2:	f1 1c       	adc	r15, r1
 2b4:	e2 0e       	add	r14, r18
 2b6:	f3 1e       	adc	r15, r19
 2b8:	89 01       	movw	r16, r18
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2bc:	f7 01       	movw	r30, r14
 2be:	81 91       	ld	r24, Z+
 2c0:	7f 01       	movw	r14, r30
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
 2ce:	05 30       	cpi	r16, 0x05	; 5
 2d0:	11 05       	cpc	r17, r1
 2d2:	a4 f3       	brlt	.-24     	; 0x2bc <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 2ec:	88 32       	cpi	r24, 0x28	; 40
 2ee:	30 f4       	brcc	.+12     	; 0x2fc <LCDGotoXY+0x10>
 if(x<40)
 {
  if(y) x|=0b01000000;
 2f0:	61 11       	cpse	r22, r1
 2f2:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDByte>
 2fc:	08 95       	ret

000002fe <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 2fe:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 300:	80 81       	ld	r24, Z
 302:	80 76       	andi	r24, 0x60	; 96
 304:	80 32       	cpi	r24, 0x20	; 32
 306:	e1 f4       	brne	.+56     	; 0x340 <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	41 f4       	brne	.+16     	; 0x31e <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 30e:	86 e6       	ldi	r24, 0x66	; 102
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 87 00 	sts	0x0087, r25
 316:	80 93 86 00 	sts	0x0086, r24
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	41 f4       	brne	.+16     	; 0x332 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 322:	8a e6       	ldi	r24, 0x6A	; 106
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 87 00 	sts	0x0087, r25
 32a:	80 93 86 00 	sts	0x0086, r24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 332:	8a 30       	cpi	r24, 0x0A	; 10
 334:	29 f4       	brne	.+10     	; 0x340 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
 336:	83 81       	ldd	r24, Z+3	; 0x03
 338:	80 93 6a 00 	sts	0x006A, r24
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
 342:	08 95       	ret

00000344 <main>:

/* ------------------------------------------------------------------------- */

int __attribute__((noreturn)) main(void)
{
 344:	2e e0       	ldi	r18, 0x0E	; 14
 346:	88 e1       	ldi	r24, 0x18	; 24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	a8 95       	wdr
 350:	81 bd       	out	0x21, r24	; 33
 352:	0f be       	out	0x3f, r0	; 63
 354:	21 bd       	out	0x21, r18	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 356:	0e 94 43 03 	call	0x686	; 0x686 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 35a:	8c 9a       	sbi	0x11, 4	; 17
 35c:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35e:	4a ef       	ldi	r20, 0xFA	; 250
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	04 c0       	rjmp	.+8      	; 0x36c <main+0x28>
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 364:	a8 95       	wdr
 366:	ca 01       	movw	r24, r20
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x24>
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	d1 f7       	brne	.-12     	; 0x364 <main+0x20>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 370:	8c 98       	cbi	0x11, 4	; 17
    sei();
 372:	78 94       	sei
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 374:	a8 95       	wdr
        usbPoll();
 376:	0e 94 50 03 	call	0x6a0	; 0x6a0 <usbPoll>
        if(usbInterruptIsReady()){
 37a:	80 91 77 00 	lds	r24, 0x0077
 37e:	84 ff       	sbrs	r24, 4
 380:	f9 cf       	rjmp	.-14     	; 0x374 <main+0x30>
static void advanceCircleByFixedAngle(void)
{
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
 382:	40 91 64 00 	lds	r20, 0x0064
 386:	50 91 65 00 	lds	r21, 0x0065
 38a:	14 16       	cp	r1, r20
 38c:	15 06       	cpc	r1, r21
 38e:	1c f0       	brlt	.+6      	; 0x396 <main+0x52>
 390:	80 ee       	ldi	r24, 0xE0	; 224
 392:	9f ef       	ldi	r25, 0xFF	; 255
 394:	02 c0       	rjmp	.+4      	; 0x39a <main+0x56>
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	84 0f       	add	r24, r20
 39c:	95 1f       	adc	r25, r21
 39e:	36 e0       	ldi	r19, 0x06	; 6
 3a0:	95 95       	asr	r25
 3a2:	87 95       	ror	r24
 3a4:	3a 95       	dec	r19
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x5c>
 3a8:	80 93 67 00 	sts	0x0067, r24
    sinus += d;
 3ac:	20 91 60 00 	lds	r18, 0x0060
 3b0:	30 91 61 00 	lds	r19, 0x0061
 3b4:	28 0f       	add	r18, r24
 3b6:	31 1d       	adc	r19, r1
 3b8:	30 93 61 00 	sts	0x0061, r19
 3bc:	20 93 60 00 	sts	0x0060, r18
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 3c0:	12 16       	cp	r1, r18
 3c2:	13 06       	cpc	r1, r19
 3c4:	1c f0       	brlt	.+6      	; 0x3cc <main+0x88>
 3c6:	80 ee       	ldi	r24, 0xE0	; 224
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <main+0x8c>
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	26 e0       	ldi	r18, 0x06	; 6
 3d6:	95 95       	asr	r25
 3d8:	87 95       	ror	r24
 3da:	2a 95       	dec	r18
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x92>
 3de:	80 93 68 00 	sts	0x0068, r24
    cosinus -= d;
 3e2:	48 1b       	sub	r20, r24
 3e4:	51 09       	sbc	r21, r1
 3e6:	50 93 65 00 	sts	0x0065, r21
 3ea:	40 93 64 00 	sts	0x0064, r20
        usbPoll();
        if(usbInterruptIsReady()){
            /* called after every poll of the interrupt endpoint */
            advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	86 e6       	ldi	r24, 0x66	; 102
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 3c 04 	call	0x878	; 0x878 <usbSetInterrupt>
 3f8:	bd cf       	rjmp	.-134    	; 0x374 <main+0x30>

000003fa <usbCrc16>:
 3fa:	a8 2f       	mov	r26, r24
 3fc:	b9 2f       	mov	r27, r25
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	50 ea       	ldi	r21, 0xA0	; 160
 406:	60 95       	com	r22
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	09 c0       	rjmp	.+18     	; 0x41e <usbCrcLoopEntry>

0000040c <usbCrcByteLoop>:
 40c:	2d 91       	ld	r18, X+
 40e:	82 27       	eor	r24, r18

00000410 <usbCrcBitLoop>:
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	10 f0       	brcs	.+4      	; 0x41a <usbCrcNoXor>
 416:	84 27       	eor	r24, r20
 418:	95 27       	eor	r25, r21

0000041a <usbCrcNoXor>:
 41a:	30 5e       	subi	r19, 0xE0	; 224
 41c:	c8 f3       	brcs	.-14     	; 0x410 <usbCrcBitLoop>

0000041e <usbCrcLoopEntry>:
 41e:	6f 5f       	subi	r22, 0xFF	; 255
 420:	a8 f3       	brcs	.-22     	; 0x40c <usbCrcByteLoop>

00000422 <usbCrcReady>:
 422:	08 95       	ret

00000424 <usbCrc16Append>:
 424:	ea df       	rcall	.-44     	; 0x3fa <usbCrc16>
 426:	8d 93       	st	X+, r24
 428:	9d 93       	st	X+, r25
 42a:	08 95       	ret

0000042c <__vector_1>:
 42c:	cf 93       	push	r28
 42e:	cf b7       	in	r28, 0x3f	; 63
 430:	cf 93       	push	r28

00000432 <waitForJ>:
 432:	c3 95       	inc	r28
 434:	84 9b       	sbis	0x10, 4	; 16
 436:	e9 f7       	brne	.-6      	; 0x432 <waitForJ>

00000438 <waitForK>:
 438:	84 9b       	sbis	0x10, 4	; 16
 43a:	09 c0       	rjmp	.+18     	; 0x44e <foundK>
 43c:	84 9b       	sbis	0x10, 4	; 16
 43e:	07 c0       	rjmp	.+14     	; 0x44e <foundK>
 440:	84 9b       	sbis	0x10, 4	; 16
 442:	05 c0       	rjmp	.+10     	; 0x44e <foundK>
 444:	84 9b       	sbis	0x10, 4	; 16
 446:	03 c0       	rjmp	.+6      	; 0x44e <foundK>
 448:	84 9b       	sbis	0x10, 4	; 16
 44a:	01 c0       	rjmp	.+2      	; 0x44e <foundK>
 44c:	a1 c0       	rjmp	.+322    	; 0x590 <sofError>

0000044e <foundK>:
 44e:	df 93       	push	r29
 450:	c0 91 85 00 	lds	r28, 0x0085
 454:	dd 27       	eor	r29, r29
 456:	c4 57       	subi	r28, 0x74	; 116
 458:	df 4f       	sbci	r29, 0xFF	; 255
 45a:	84 9b       	sbis	0x10, 4	; 16
 45c:	02 c0       	rjmp	.+4      	; 0x462 <haveTwoBitsK>
 45e:	df 91       	pop	r29
 460:	eb cf       	rjmp	.-42     	; 0x438 <waitForK>

00000462 <haveTwoBitsK>:
 462:	2f 93       	push	r18
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	00 b3       	in	r16, 0x10	; 16
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	04 fb       	bst	r16, 4
 46e:	20 f9       	bld	r18, 0
 470:	4f 93       	push	r20
 472:	3f 93       	push	r19
 474:	10 b3       	in	r17, 0x10	; 16
 476:	4f ef       	ldi	r20, 0xFF	; 255
 478:	01 27       	eor	r16, r17
 47a:	04 fb       	bst	r16, 4
 47c:	21 f9       	bld	r18, 1
 47e:	3b e0       	ldi	r19, 0x0B	; 11
 480:	31 c0       	rjmp	.+98     	; 0x4e4 <rxbit2>

00000482 <unstuff0>:
 482:	4e 7f       	andi	r20, 0xFE	; 254
 484:	01 2f       	mov	r16, r17
 486:	10 b3       	in	r17, 0x10	; 16
 488:	21 60       	ori	r18, 0x01	; 1
 48a:	28 c0       	rjmp	.+80     	; 0x4dc <didUnstuff0>

0000048c <unstuff1>:
 48c:	10 2f       	mov	r17, r16
 48e:	4d 7f       	andi	r20, 0xFD	; 253
 490:	22 60       	ori	r18, 0x02	; 2
 492:	00 00       	nop
 494:	00 b3       	in	r16, 0x10	; 16
 496:	29 c0       	rjmp	.+82     	; 0x4ea <didUnstuff1>

00000498 <unstuff2>:
 498:	4b 7f       	andi	r20, 0xFB	; 251
 49a:	24 60       	ori	r18, 0x04	; 4
 49c:	01 2f       	mov	r16, r17
 49e:	00 00       	nop
 4a0:	10 b3       	in	r17, 0x10	; 16
 4a2:	2b c0       	rjmp	.+86     	; 0x4fa <didUnstuff2>

000004a4 <unstuff3>:
 4a4:	10 b3       	in	r17, 0x10	; 16
 4a6:	47 7f       	andi	r20, 0xF7	; 247
 4a8:	28 60       	ori	r18, 0x08	; 8
 4aa:	2a c0       	rjmp	.+84     	; 0x500 <didUnstuff3>

000004ac <unstuff4>:
 4ac:	4f 7e       	andi	r20, 0xEF	; 239
 4ae:	00 b3       	in	r16, 0x10	; 16
 4b0:	20 61       	ori	r18, 0x10	; 16
 4b2:	2c c0       	rjmp	.+88     	; 0x50c <didUnstuff4>

000004b4 <unstuff5>:
 4b4:	4f 7d       	andi	r20, 0xDF	; 223
 4b6:	10 b3       	in	r17, 0x10	; 16
 4b8:	20 62       	ori	r18, 0x20	; 32
 4ba:	2f c0       	rjmp	.+94     	; 0x51a <didUnstuff5>

000004bc <unstuff6>:
 4bc:	4f 7b       	andi	r20, 0xBF	; 191
 4be:	00 b3       	in	r16, 0x10	; 16
 4c0:	20 64       	ori	r18, 0x40	; 64
 4c2:	32 c0       	rjmp	.+100    	; 0x528 <didUnstuff6>

000004c4 <rxLoop>:
 4c4:	42 27       	eor	r20, r18
 4c6:	00 b3       	in	r16, 0x10	; 16
 4c8:	49 93       	st	Y+, r20
 4ca:	4f ef       	ldi	r20, 0xFF	; 255
 4cc:	00 00       	nop
 4ce:	10 27       	eor	r17, r16
 4d0:	14 fb       	bst	r17, 4
 4d2:	20 f9       	bld	r18, 0
 4d4:	10 b3       	in	r17, 0x10	; 16
 4d6:	14 71       	andi	r17, 0x14	; 20
 4d8:	c9 f1       	breq	.+114    	; 0x54c <se0>
 4da:	29 7f       	andi	r18, 0xF9	; 249

000004dc <didUnstuff0>:
 4dc:	91 f2       	breq	.-92     	; 0x482 <unstuff0>
 4de:	01 27       	eor	r16, r17
 4e0:	04 fb       	bst	r16, 4
 4e2:	21 f9       	bld	r18, 1

000004e4 <rxbit2>:
 4e4:	00 b3       	in	r16, 0x10	; 16
 4e6:	23 7f       	andi	r18, 0xF3	; 243
 4e8:	89 f2       	breq	.-94     	; 0x48c <unstuff1>

000004ea <didUnstuff1>:
 4ea:	31 50       	subi	r19, 0x01	; 1
 4ec:	58 f1       	brcs	.+86     	; 0x544 <overflow>
 4ee:	10 27       	eor	r17, r16
 4f0:	14 fb       	bst	r17, 4
 4f2:	22 f9       	bld	r18, 2
 4f4:	10 b3       	in	r17, 0x10	; 16
 4f6:	27 7e       	andi	r18, 0xE7	; 231
 4f8:	79 f2       	breq	.-98     	; 0x498 <unstuff2>

000004fa <didUnstuff2>:
 4fa:	01 27       	eor	r16, r17
 4fc:	04 fb       	bst	r16, 4
 4fe:	23 f9       	bld	r18, 3

00000500 <didUnstuff3>:
 500:	2f 7c       	andi	r18, 0xCF	; 207
 502:	81 f2       	breq	.-96     	; 0x4a4 <unstuff3>
 504:	00 b3       	in	r16, 0x10	; 16
 506:	10 27       	eor	r17, r16
 508:	14 fb       	bst	r17, 4
 50a:	24 f9       	bld	r18, 4

0000050c <didUnstuff4>:
 50c:	2f 79       	andi	r18, 0x9F	; 159
 50e:	71 f2       	breq	.-100    	; 0x4ac <unstuff4>
 510:	00 c0       	rjmp	.+0      	; 0x512 <didUnstuff4+0x6>
 512:	10 b3       	in	r17, 0x10	; 16
 514:	01 27       	eor	r16, r17
 516:	04 fb       	bst	r16, 4
 518:	25 f9       	bld	r18, 5

0000051a <didUnstuff5>:
 51a:	2f 73       	andi	r18, 0x3F	; 63
 51c:	59 f2       	breq	.-106    	; 0x4b4 <unstuff5>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <didUnstuff5+0x6>
 520:	00 b3       	in	r16, 0x10	; 16
 522:	10 27       	eor	r17, r16
 524:	14 fb       	bst	r17, 4
 526:	26 f9       	bld	r18, 6

00000528 <didUnstuff6>:
 528:	22 30       	cpi	r18, 0x02	; 2
 52a:	40 f2       	brcs	.-112    	; 0x4bc <unstuff6>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <didUnstuff6+0x6>
 52e:	10 b3       	in	r17, 0x10	; 16
 530:	01 27       	eor	r16, r17
 532:	04 fb       	bst	r16, 4
 534:	27 f9       	bld	r18, 7

00000536 <didUnstuff7>:
 536:	24 30       	cpi	r18, 0x04	; 4
 538:	28 f6       	brcc	.-118    	; 0x4c4 <rxLoop>

0000053a <unstuff7>:
 53a:	4f 77       	andi	r20, 0x7F	; 127
 53c:	20 68       	ori	r18, 0x80	; 128
 53e:	10 b3       	in	r17, 0x10	; 16
 540:	00 00       	nop
 542:	f9 cf       	rjmp	.-14     	; 0x536 <didUnstuff7>

00000544 <overflow>:
 544:	10 e4       	ldi	r17, 0x40	; 64
 546:	1a bf       	out	0x3a, r17	; 58

00000548 <ignorePacket>:
 548:	00 27       	eor	r16, r16
 54a:	17 c0       	rjmp	.+46     	; 0x57a <handleSetupOrOut>

0000054c <se0>:
 54c:	3b 50       	subi	r19, 0x0B	; 11
 54e:	31 95       	neg	r19
 550:	c3 1b       	sub	r28, r19
 552:	d0 40       	sbci	r29, 0x00	; 0
 554:	10 e4       	ldi	r17, 0x40	; 64
 556:	1a bf       	out	0x3a, r17	; 58
 558:	08 81       	ld	r16, Y
 55a:	03 3c       	cpi	r16, 0xC3	; 195
 55c:	e9 f0       	breq	.+58     	; 0x598 <handleData>
 55e:	0b 34       	cpi	r16, 0x4B	; 75
 560:	d9 f0       	breq	.+54     	; 0x598 <handleData>
 562:	20 91 83 00 	lds	r18, 0x0083
 566:	19 81       	ldd	r17, Y+1	; 0x01
 568:	11 0f       	add	r17, r17
 56a:	12 13       	cpse	r17, r18
 56c:	ed cf       	rjmp	.-38     	; 0x548 <ignorePacket>
 56e:	09 36       	cpi	r16, 0x69	; 105
 570:	41 f1       	breq	.+80     	; 0x5c2 <handleIn>
 572:	0d 32       	cpi	r16, 0x2D	; 45
 574:	11 f0       	breq	.+4      	; 0x57a <handleSetupOrOut>
 576:	01 3e       	cpi	r16, 0xE1	; 225
 578:	39 f7       	brne	.-50     	; 0x548 <ignorePacket>

0000057a <handleSetupOrOut>:
 57a:	00 93 8a 00 	sts	0x008A, r16

0000057e <doReturn>:
 57e:	3f 91       	pop	r19
 580:	4f 91       	pop	r20
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	2f 91       	pop	r18
 588:	df 91       	pop	r29
 58a:	ca b7       	in	r28, 0x3a	; 58
 58c:	c6 fd       	sbrc	r28, 6
 58e:	51 cf       	rjmp	.-350    	; 0x432 <waitForJ>

00000590 <sofError>:
 590:	cf 91       	pop	r28
 592:	cf bf       	out	0x3f, r28	; 63
 594:	cf 91       	pop	r28
 596:	18 95       	reti

00000598 <handleData>:
 598:	20 91 8a 00 	lds	r18, 0x008A
 59c:	22 23       	and	r18, r18
 59e:	79 f3       	breq	.-34     	; 0x57e <doReturn>
 5a0:	10 91 88 00 	lds	r17, 0x0088
 5a4:	11 23       	and	r17, r17
 5a6:	11 f5       	brne	.+68     	; 0x5ec <sendNakAndReti>
 5a8:	34 30       	cpi	r19, 0x04	; 4
 5aa:	12 f1       	brmi	.+68     	; 0x5f0 <sendAckAndReti>
 5ac:	30 93 88 00 	sts	0x0088, r19
 5b0:	20 93 84 00 	sts	0x0084, r18
 5b4:	10 91 85 00 	lds	r17, 0x0085
 5b8:	3b e0       	ldi	r19, 0x0B	; 11
 5ba:	31 1b       	sub	r19, r17
 5bc:	30 93 85 00 	sts	0x0085, r19
 5c0:	17 c0       	rjmp	.+46     	; 0x5f0 <sendAckAndReti>

000005c2 <handleIn>:
 5c2:	00 91 88 00 	lds	r16, 0x0088
 5c6:	01 30       	cpi	r16, 0x01	; 1
 5c8:	8c f4       	brge	.+34     	; 0x5ec <sendNakAndReti>
 5ca:	0a e5       	ldi	r16, 0x5A	; 90
 5cc:	30 91 62 00 	lds	r19, 0x0062
 5d0:	34 fd       	sbrc	r19, 4
 5d2:	10 c0       	rjmp	.+32     	; 0x5f4 <sendCntAndReti>
 5d4:	00 93 62 00 	sts	0x0062, r16
 5d8:	cc e6       	ldi	r28, 0x6C	; 108
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	0f c0       	rjmp	.+30     	; 0x5fc <usbSendAndReti>

000005de <stuffN1Delay>:
 5de:	27 95       	ror	r18
 5e0:	a8 f4       	brcc	.+42     	; 0x60c <doExorN1>
 5e2:	51 50       	subi	r21, 0x01	; 1
 5e4:	a9 f4       	brne	.+42     	; 0x610 <commonN1>
 5e6:	22 0f       	add	r18, r18
 5e8:	00 00       	nop
 5ea:	f9 cf       	rjmp	.-14     	; 0x5de <stuffN1Delay>

000005ec <sendNakAndReti>:
 5ec:	4a e5       	ldi	r20, 0x5A	; 90
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <usbSendX3>

000005f0 <sendAckAndReti>:
 5f0:	42 ed       	ldi	r20, 0xD2	; 210
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <usbSendX3>

000005f4 <sendCntAndReti>:
 5f4:	43 2f       	mov	r20, r19

000005f6 <usbSendX3>:
 5f6:	c4 e1       	ldi	r28, 0x14	; 20
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	32 e0       	ldi	r19, 0x02	; 2

000005fc <usbSendAndReti>:
 5fc:	11 b3       	in	r17, 0x11	; 17
 5fe:	14 61       	ori	r17, 0x14	; 20
 600:	94 9a       	sbi	0x12, 4	; 18
 602:	11 bb       	out	0x11, r17	; 17
 604:	02 b3       	in	r16, 0x12	; 18
 606:	20 e4       	ldi	r18, 0x40	; 64
 608:	14 e1       	ldi	r17, 0x14	; 20
 60a:	5f 93       	push	r21

0000060c <doExorN1>:
 60c:	01 27       	eor	r16, r17
 60e:	56 e0       	ldi	r21, 0x06	; 6

00000610 <commonN1>:
 610:	02 bb       	out	0x12, r16	; 18
 612:	27 95       	ror	r18
 614:	20 f4       	brcc	.+8      	; 0x61e <doExorN2>
 616:	51 50       	subi	r21, 0x01	; 1
 618:	21 f4       	brne	.+8      	; 0x622 <commonN2>
 61a:	22 0f       	add	r18, r18
 61c:	f9 cf       	rjmp	.-14     	; 0x610 <commonN1>

0000061e <doExorN2>:
 61e:	01 27       	eor	r16, r17
 620:	56 e0       	ldi	r21, 0x06	; 6

00000622 <commonN2>:
 622:	00 00       	nop
 624:	3b 5a       	subi	r19, 0xAB	; 171
 626:	02 bb       	out	0x12, r16	; 18
 628:	d0 f2       	brcs	.-76     	; 0x5de <stuffN1Delay>

0000062a <stuff6Delay>:
 62a:	27 95       	ror	r18
 62c:	28 f4       	brcc	.+10     	; 0x638 <doExor6>
 62e:	51 50       	subi	r21, 0x01	; 1
 630:	29 f4       	brne	.+10     	; 0x63c <common6>
 632:	22 0f       	add	r18, r18
 634:	00 00       	nop
 636:	f9 cf       	rjmp	.-14     	; 0x62a <stuff6Delay>

00000638 <doExor6>:
 638:	01 27       	eor	r16, r17
 63a:	56 e0       	ldi	r21, 0x06	; 6

0000063c <common6>:
 63c:	27 95       	ror	r18
 63e:	02 bb       	out	0x12, r16	; 18
 640:	20 f4       	brcc	.+8      	; 0x64a <doExor7>
 642:	51 50       	subi	r21, 0x01	; 1
 644:	21 f4       	brne	.+8      	; 0x64e <common7>
 646:	22 0f       	add	r18, r18
 648:	f9 cf       	rjmp	.-14     	; 0x63c <common6>

0000064a <doExor7>:
 64a:	01 27       	eor	r16, r17
 64c:	56 e0       	ldi	r21, 0x06	; 6

0000064e <common7>:
 64e:	29 91       	ld	r18, Y+
 650:	33 23       	and	r19, r19
 652:	02 bb       	out	0x12, r16	; 18
 654:	21 f6       	brne	.-120    	; 0x5de <stuffN1Delay>
 656:	0b 7e       	andi	r16, 0xEB	; 235
 658:	10 91 89 00 	lds	r17, 0x0089
 65c:	11 0f       	add	r17, r17
 65e:	c6 51       	subi	r28, 0x16	; 22
 660:	d0 40       	sbci	r29, 0x00	; 0
 662:	02 bb       	out	0x12, r16	; 18
 664:	11 f0       	breq	.+4      	; 0x66a <skipAddrAssign>
 666:	10 93 83 00 	sts	0x0083, r17

0000066a <skipAddrAssign>:
 66a:	10 e4       	ldi	r17, 0x40	; 64
 66c:	1a bf       	out	0x3a, r17	; 58
 66e:	00 61       	ori	r16, 0x10	; 16
 670:	11 b3       	in	r17, 0x11	; 17
 672:	1b 7e       	andi	r17, 0xEB	; 235
 674:	40 2f       	mov	r20, r16
 676:	4b 7e       	andi	r20, 0xEB	; 235
 678:	5f 91       	pop	r21
 67a:	00 c0       	rjmp	.+0      	; 0x67c <skipAddrAssign+0x12>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <skipAddrAssign+0x14>
 67e:	02 bb       	out	0x12, r16	; 18
 680:	11 bb       	out	0x11, r17	; 17
 682:	42 bb       	out	0x12, r20	; 18
 684:	7c cf       	rjmp	.-264    	; 0x57e <doReturn>

00000686 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 686:	85 b7       	in	r24, 0x35	; 53
 688:	82 60       	ori	r24, 0x02	; 2
 68a:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 68c:	8b b7       	in	r24, 0x3b	; 59
 68e:	80 64       	ori	r24, 0x40	; 64
 690:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 692:	8b e4       	ldi	r24, 0x4B	; 75
 694:	80 93 78 00 	sts	0x0078, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 698:	8a e5       	ldi	r24, 0x5A	; 90
 69a:	80 93 77 00 	sts	0x0077, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 69e:	08 95       	ret

000006a0 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 6a6:	90 91 88 00 	lds	r25, 0x0088
 6aa:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 6ac:	97 fd       	sbrc	r25, 7
 6ae:	88 c0       	rjmp	.+272    	; 0x7c0 <usbPoll+0x120>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6b0:	20 91 85 00 	lds	r18, 0x0085
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 6b4:	80 91 84 00 	lds	r24, 0x0084
 6b8:	8d 32       	cpi	r24, 0x2D	; 45
 6ba:	09 f0       	breq	.+2      	; 0x6be <usbPoll+0x1e>
 6bc:	7f c0       	rjmp	.+254    	; 0x7bc <usbPoll+0x11c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 6be:	98 30       	cpi	r25, 0x08	; 8
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <usbPoll+0x24>
 6c2:	7c c0       	rjmp	.+248    	; 0x7bc <usbPoll+0x11c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6c4:	cc e0       	ldi	r28, 0x0C	; 12
 6c6:	d0 e0       	ldi	r29, 0x00	; 0
 6c8:	c2 1b       	sub	r28, r18
 6ca:	d1 09       	sbc	r29, r1
 6cc:	c4 57       	subi	r28, 0x74	; 116
 6ce:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6d0:	83 ec       	ldi	r24, 0xC3	; 195
 6d2:	80 93 6c 00 	sts	0x006C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6d6:	8a e5       	ldi	r24, 0x5A	; 90
 6d8:	80 93 62 00 	sts	0x0062, r24
        usbMsgFlags = 0;
 6dc:	10 92 6b 00 	sts	0x006B, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6e0:	88 81       	ld	r24, Y
 6e2:	80 76       	andi	r24, 0x60	; 96
 6e4:	29 f0       	breq	.+10     	; 0x6f0 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 6e6:	ce 01       	movw	r24, r28
 6e8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <usbFunctionSetup>
 6ec:	28 2f       	mov	r18, r24
 6ee:	5d c0       	rjmp	.+186    	; 0x7aa <usbPoll+0x10a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6f2:	10 92 75 00 	sts	0x0075, r1
    SWITCH_START(rq->bRequest)
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6f8:	88 23       	and	r24, r24
 6fa:	21 f4       	brne	.+8      	; 0x704 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6fc:	10 92 76 00 	sts	0x0076, r1
 700:	22 e0       	ldi	r18, 0x02	; 2
 702:	4d c0       	rjmp	.+154    	; 0x79e <usbPoll+0xfe>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 704:	85 30       	cpi	r24, 0x05	; 5
 706:	19 f4       	brne	.+6      	; 0x70e <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 708:	90 93 89 00 	sts	0x0089, r25
 70c:	47 c0       	rjmp	.+142    	; 0x79c <usbPoll+0xfc>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 70e:	86 30       	cpi	r24, 0x06	; 6
 710:	89 f5       	brne	.+98     	; 0x774 <usbPoll+0xd4>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 712:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	19 f4       	brne	.+6      	; 0x71e <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 718:	80 eb       	ldi	r24, 0xB0	; 176
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	20 c0       	rjmp	.+64     	; 0x75e <usbPoll+0xbe>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 71e:	82 30       	cpi	r24, 0x02	; 2
 720:	41 f4       	brne	.+16     	; 0x732 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 722:	82 ec       	ldi	r24, 0xC2	; 194
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	90 93 87 00 	sts	0x0087, r25
 72a:	80 93 86 00 	sts	0x0086, r24
 72e:	29 e1       	ldi	r18, 0x19	; 25
 730:	1d c0       	rjmp	.+58     	; 0x76c <usbPoll+0xcc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	d1 f4       	brne	.+52     	; 0x76a <usbPoll+0xca>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 736:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 738:	88 23       	and	r24, r24
 73a:	41 f4       	brne	.+16     	; 0x74c <usbPoll+0xac>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 73c:	88 e8       	ldi	r24, 0x88	; 136
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	90 93 87 00 	sts	0x0087, r25
 744:	80 93 86 00 	sts	0x0086, r24
 748:	24 e0       	ldi	r18, 0x04	; 4
 74a:	10 c0       	rjmp	.+32     	; 0x76c <usbPoll+0xcc>
        SWITCH_CASE(1)
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	19 f4       	brne	.+6      	; 0x756 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 750:	8c e8       	ldi	r24, 0x8C	; 140
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	04 c0       	rjmp	.+8      	; 0x75e <usbPoll+0xbe>
        SWITCH_CASE(2)
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	41 f4       	brne	.+16     	; 0x76a <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 75a:	8e e9       	ldi	r24, 0x9E	; 158
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	90 93 87 00 	sts	0x0087, r25
 762:	80 93 86 00 	sts	0x0086, r24
 766:	22 e1       	ldi	r18, 0x12	; 18
 768:	01 c0       	rjmp	.+2      	; 0x76c <usbPoll+0xcc>
 76a:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 76c:	80 e4       	ldi	r24, 0x40	; 64
 76e:	80 93 6b 00 	sts	0x006B, r24
 772:	1b c0       	rjmp	.+54     	; 0x7aa <usbPoll+0x10a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	21 f4       	brne	.+8      	; 0x780 <usbPoll+0xe0>
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	8b e8       	ldi	r24, 0x8B	; 139
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	11 c0       	rjmp	.+34     	; 0x7a2 <usbPoll+0x102>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 780:	89 30       	cpi	r24, 0x09	; 9
 782:	19 f4       	brne	.+6      	; 0x78a <usbPoll+0xea>
        usbConfiguration = value;
 784:	90 93 8b 00 	sts	0x008B, r25
 788:	09 c0       	rjmp	.+18     	; 0x79c <usbPoll+0xfc>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 78a:	8a 30       	cpi	r24, 0x0A	; 10
 78c:	11 f4       	brne	.+4      	; 0x792 <usbPoll+0xf2>
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	06 c0       	rjmp	.+12     	; 0x79e <usbPoll+0xfe>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 792:	8b 30       	cpi	r24, 0x0B	; 11
 794:	19 f4       	brne	.+6      	; 0x79c <usbPoll+0xfc>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 796:	8b e4       	ldi	r24, 0x4B	; 75
 798:	80 93 78 00 	sts	0x0078, r24
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	85 e7       	ldi	r24, 0x75	; 117
 7a0:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 7a2:	90 93 87 00 	sts	0x0087, r25
 7a6:	80 93 86 00 	sts	0x0086, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7aa:	8f 81       	ldd	r24, Y+7	; 0x07
 7ac:	88 23       	and	r24, r24
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <usbPoll+0x118>
 7b0:	8e 81       	ldd	r24, Y+6	; 0x06
 7b2:	82 17       	cp	r24, r18
 7b4:	08 f4       	brcc	.+2      	; 0x7b8 <usbPoll+0x118>
 7b6:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7b8:	20 93 63 00 	sts	0x0063, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 7bc:	10 92 88 00 	sts	0x0088, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 7c0:	80 91 62 00 	lds	r24, 0x0062
 7c4:	84 ff       	sbrs	r24, 4
 7c6:	4a c0       	rjmp	.+148    	; 0x85c <usbPoll+0x1bc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 7c8:	80 91 63 00 	lds	r24, 0x0063
 7cc:	8f 3f       	cpi	r24, 0xFF	; 255
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <usbPoll+0x132>
 7d0:	45 c0       	rjmp	.+138    	; 0x85c <usbPoll+0x1bc>
 7d2:	18 2f       	mov	r17, r24
 7d4:	89 30       	cpi	r24, 0x09	; 9
 7d6:	08 f0       	brcs	.+2      	; 0x7da <usbPoll+0x13a>
 7d8:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 7da:	81 1b       	sub	r24, r17
 7dc:	80 93 63 00 	sts	0x0063, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 7e0:	80 91 6c 00 	lds	r24, 0x006C
 7e4:	98 e8       	ldi	r25, 0x88	; 136
 7e6:	89 27       	eor	r24, r25
 7e8:	80 93 6c 00 	sts	0x006C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 7ec:	11 23       	and	r17, r17
 7ee:	41 f1       	breq	.+80     	; 0x840 <usbPoll+0x1a0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 7f0:	20 91 86 00 	lds	r18, 0x0086
 7f4:	30 91 87 00 	lds	r19, 0x0087
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7f8:	80 91 6b 00 	lds	r24, 0x006B
 7fc:	86 ff       	sbrs	r24, 6
 7fe:	0d c0       	rjmp	.+26     	; 0x81a <usbPoll+0x17a>
 800:	ad e6       	ldi	r26, 0x6D	; 109
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 808:	f9 01       	movw	r30, r18
 80a:	e8 0f       	add	r30, r24
 80c:	f9 1f       	adc	r31, r25
 80e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 810:	ed 93       	st	X+, r30
 812:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 814:	18 17       	cp	r17, r24
 816:	c1 f7       	brne	.-16     	; 0x808 <usbPoll+0x168>
 818:	08 c0       	rjmp	.+16     	; 0x82a <usbPoll+0x18a>
 81a:	91 2f       	mov	r25, r17
 81c:	d9 01       	movw	r26, r18
 81e:	ed e6       	ldi	r30, 0x6D	; 109
 820:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 822:	8d 91       	ld	r24, X+
 824:	81 93       	st	Z+, r24
                }while(--i);
 826:	91 50       	subi	r25, 0x01	; 1
 828:	e1 f7       	brne	.-8      	; 0x822 <usbPoll+0x182>
 82a:	11 50       	subi	r17, 0x01	; 1
 82c:	81 2f       	mov	r24, r17
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	1f 5f       	subi	r17, 0xFF	; 255
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 838:	90 93 87 00 	sts	0x0087, r25
 83c:	80 93 86 00 	sts	0x0086, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 840:	61 2f       	mov	r22, r17
 842:	8d e6       	ldi	r24, 0x6D	; 109
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 12 02 	call	0x424	; 0x424 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 84a:	61 2f       	mov	r22, r17
 84c:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 84e:	6c 30       	cpi	r22, 0x0C	; 12
 850:	19 f0       	breq	.+6      	; 0x858 <usbPoll+0x1b8>
            usbMsgLen = USB_NO_MSG;
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	80 93 63 00 	sts	0x0063, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 858:	60 93 62 00 	sts	0x0062, r22
 85c:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 85e:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 860:	84 71       	andi	r24, 0x14	; 20
 862:	31 f4       	brne	.+12     	; 0x870 <usbPoll+0x1d0>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 864:	91 50       	subi	r25, 0x01	; 1
 866:	d9 f7       	brne	.-10     	; 0x85e <usbPoll+0x1be>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 868:	10 92 89 00 	sts	0x0089, r1
    usbDeviceAddr = 0;
 86c:	10 92 83 00 	sts	0x0083, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	08 95       	ret

00000878 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 878:	1f 93       	push	r17
 87a:	dc 01       	movw	r26, r24
 87c:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 87e:	80 91 77 00 	lds	r24, 0x0077
 882:	84 ff       	sbrs	r24, 4
 884:	07 c0       	rjmp	.+14     	; 0x894 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 886:	80 91 78 00 	lds	r24, 0x0078
 88a:	98 e8       	ldi	r25, 0x88	; 136
 88c:	89 27       	eor	r24, r25
 88e:	80 93 78 00 	sts	0x0078, r24
 892:	03 c0       	rjmp	.+6      	; 0x89a <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 894:	8a e5       	ldi	r24, 0x5A	; 90
 896:	80 93 77 00 	sts	0x0077, r24
 89a:	91 2f       	mov	r25, r17
 89c:	e9 e7       	ldi	r30, 0x79	; 121
 89e:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 8a0:	8d 91       	ld	r24, X+
 8a2:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 8a4:	91 50       	subi	r25, 0x01	; 1
 8a6:	e1 f7       	brne	.-8      	; 0x8a0 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 8a8:	61 2f       	mov	r22, r17
 8aa:	89 e7       	ldi	r24, 0x79	; 121
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 12 02 	call	0x424	; 0x424 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 8b2:	1c 5f       	subi	r17, 0xFC	; 252
 8b4:	10 93 77 00 	sts	0x0077, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 8b8:	1f 91       	pop	r17
 8ba:	08 95       	ret

000008bc <__divmodhi4>:
 8bc:	97 fb       	bst	r25, 7
 8be:	09 2e       	mov	r0, r25
 8c0:	07 26       	eor	r0, r23
 8c2:	0a d0       	rcall	.+20     	; 0x8d8 <__divmodhi4_neg1>
 8c4:	77 fd       	sbrc	r23, 7
 8c6:	04 d0       	rcall	.+8      	; 0x8d0 <__divmodhi4_neg2>
 8c8:	0c d0       	rcall	.+24     	; 0x8e2 <__udivmodhi4>
 8ca:	06 d0       	rcall	.+12     	; 0x8d8 <__divmodhi4_neg1>
 8cc:	00 20       	and	r0, r0
 8ce:	1a f4       	brpl	.+6      	; 0x8d6 <__divmodhi4_exit>

000008d0 <__divmodhi4_neg2>:
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255

000008d6 <__divmodhi4_exit>:
 8d6:	08 95       	ret

000008d8 <__divmodhi4_neg1>:
 8d8:	f6 f7       	brtc	.-4      	; 0x8d6 <__divmodhi4_exit>
 8da:	90 95       	com	r25
 8dc:	81 95       	neg	r24
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	08 95       	ret

000008e2 <__udivmodhi4>:
 8e2:	aa 1b       	sub	r26, r26
 8e4:	bb 1b       	sub	r27, r27
 8e6:	51 e1       	ldi	r21, 0x11	; 17
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <__udivmodhi4_ep>

000008ea <__udivmodhi4_loop>:
 8ea:	aa 1f       	adc	r26, r26
 8ec:	bb 1f       	adc	r27, r27
 8ee:	a6 17       	cp	r26, r22
 8f0:	b7 07       	cpc	r27, r23
 8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__udivmodhi4_ep>
 8f4:	a6 1b       	sub	r26, r22
 8f6:	b7 0b       	sbc	r27, r23

000008f8 <__udivmodhi4_ep>:
 8f8:	88 1f       	adc	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	5a 95       	dec	r21
 8fe:	a9 f7       	brne	.-22     	; 0x8ea <__udivmodhi4_loop>
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	bc 01       	movw	r22, r24
 906:	cd 01       	movw	r24, r26
 908:	08 95       	ret

0000090a <_exit>:
 90a:	f8 94       	cli

0000090c <__stop_program>:
 90c:	ff cf       	rjmp	.-2      	; 0x90c <__stop_program>
