
avrhidmouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000093e  000009b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800064  00000942  000009b6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011bf  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000887  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064f  00000000  00000000  0000319d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000037ec  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_1>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000054 <usbDescriptorHidReport>:
  54:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  64:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 03     ..%...u.....u...
  74:	05 01 09 30 09 31 09 38 15 81 25 7f 75 08 95 03     ...0.1.8..%.u...
  84:	81 06 c0 c0                                         ....

00000088 <usbDescriptorString0>:
  88:	04 03 09 04                                         ....

0000008c <usbDescriptorStringVendor>:
  8c:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

00000098 <usbDescriptorStringDevice>:
  98:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

000000a4 <usbDescriptorDevice>:
  a4:	12 01 10 01 00 00 00 08 e8 03 e8 03 00 01 01 02     ................
  b4:	00 01                                               ..

000000b6 <usbDescriptorConfiguration>:
  b6:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  c6:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  d6:	00 64                                               .d

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf e5       	ldi	r28, 0x5F	; 95
  de:	d4 e0       	ldi	r29, 0x04	; 4
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	a0 e6       	ldi	r26, 0x60	; 96
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ee e3       	ldi	r30, 0x3E	; 62
  ec:	f9 e0       	ldi	r31, 0x09	; 9
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <.do_copy_data_start>

000000f0 <.do_copy_data_loop>:
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0

000000f4 <.do_copy_data_start>:
  f4:	a4 36       	cpi	r26, 0x64	; 100
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <.do_copy_data_loop>

000000fa <__do_clear_bss>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	a4 e6       	ldi	r26, 0x64	; 100
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	a2 3a       	cpi	r26, 0xA2	; 162
 106:	b1 07       	cpc	r27, r17
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
 10a:	0e 94 a0 01 	call	0x340	; 0x340 <main>
 10e:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000116 <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
 116:	87 b3       	in	r24, 0x17	; 23
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	87 bb       	out	0x17, r24	; 23

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;

	//change LCD mode
	SET_RW();		//Read mode
 11c:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
 11e:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	c6 9a       	sbi	0x18, 6	; 24
 12a:	82 2f       	mov	r24, r18
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 130:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	92 2f       	mov	r25, r18
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 13c:	c6 98       	cbi	0x18, 6	; 24
 13e:	92 2f       	mov	r25, r18
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 144:	c6 9a       	sbi	0x18, 6	; 24
 146:	92 2f       	mov	r25, r18
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 14c:	96 b3       	in	r25, 0x16	; 22
 14e:	92 2f       	mov	r25, r18
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 154:	c6 98       	cbi	0x18, 6	; 24
 156:	92 2f       	mov	r25, r18
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 15c:	87 fd       	sbrc	r24, 7
 15e:	e4 cf       	rjmp	.-56     	; 0x128 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 160:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8f 60       	ori	r24, 0x0F	; 15
 166:	87 bb       	out	0x17, r24	; 23

}
 168:	08 95       	ret

0000016a <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 16a:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 16c:	66 23       	and	r22, r22
 16e:	11 f4       	brne	.+4      	; 0x174 <LCDByte+0xa>
	CLEAR_RS();
 170:	c4 98       	cbi	0x18, 4	; 24
 172:	01 c0       	rjmp	.+2      	; 0x176 <LCDByte+0xc>
else
	SET_RS();
 174:	c4 9a       	sbi	0x18, 4	; 24
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	82 2f       	mov	r24, r18
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 17e:	c6 9a       	sbi	0x18, 6	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 180:	88 b3       	in	r24, 0x18	; 24
 182:	93 2f       	mov	r25, r19
 184:	92 95       	swap	r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 18c:	98 bb       	out	0x18, r25	; 24
 18e:	82 2f       	mov	r24, r18
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 194:	c6 98       	cbi	0x18, 6	; 24
 196:	82 2f       	mov	r24, r18
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 19c:	c6 9a       	sbi	0x18, 6	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	3f 70       	andi	r19, 0x0F	; 15
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	82 2f       	mov	r24, r18
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1ae:	c6 98       	cbi	0x18, 6	; 24
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1b4:	0e 94 8b 00 	call	0x116	; 0x116 <LCDBusyLoop>
}
 1b8:	08 95       	ret

000001ba <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1ba:	1f 93       	push	r17
 1bc:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	8c e4       	ldi	r24, 0x4C	; 76
 1c0:	9d e1       	ldi	r25, 0x1D	; 29
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1c6:	87 b3       	in	r24, 0x17	; 23
 1c8:	8f 60       	ori	r24, 0x0F	; 15
 1ca:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 1cc:	be 9a       	sbi	0x17, 6	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1ce:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1d0:	bd 9a       	sbi	0x17, 5	; 23

	LCD_DATA_PORT&=0XF0;
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 1d8:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RW();
 1da:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 1dc:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	98 2f       	mov	r25, r24
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1e6:	c6 9a       	sbi	0x18, 6	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1e8:	c1 9a       	sbi	0x18, 1	; 24
 1ea:	98 2f       	mov	r25, r24
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 1f0:	c6 98       	cbi	0x18, 6	; 24
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1f6:	0e 94 8b 00 	call	0x116	; 0x116 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 2f       	mov	r24, r17
 1fe:	8c 60       	ori	r24, 0x0C	; 12
 200:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	88 e2       	ldi	r24, 0x28	; 40
 208:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDByte>
}
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	04 c0       	rjmp	.+8      	; 0x220 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDByte>
	msg++;
 21e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 220:	88 81       	ld	r24, Y
 222:	88 23       	and	r24, r24
 224:	c9 f7       	brne	.-14     	; 0x218 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <LCDWriteInt+0xe>
 23a:	00 d0       	rcall	.+0      	; 0x23c <LCDWriteInt+0x10>
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	9c 01       	movw	r18, r24
 244:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 246:	fe 01       	movw	r30, r28
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	df 01       	movw	r26, r30
 24e:	1d 92       	st	X+, r1
 250:	8a 95       	dec	r24
 252:	e9 f7       	brne	.-6      	; 0x24e <LCDWriteInt+0x22>
 254:	fe 01       	movw	r30, r28
 256:	35 96       	adiw	r30, 0x05	; 5
 258:	0d c0       	rjmp	.+26     	; 0x274 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 25a:	c9 01       	movw	r24, r18
 25c:	6a e0       	ldi	r22, 0x0A	; 10
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	0e 94 76 04 	call	0x8ec	; 0x8ec <__divmodhi4>
 264:	80 83       	st	Z, r24
	val=val/10;
 266:	c9 01       	movw	r24, r18
 268:	6a e0       	ldi	r22, 0x0A	; 10
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	0e 94 76 04 	call	0x8ec	; 0x8ec <__divmodhi4>
 270:	9b 01       	movw	r18, r22
 272:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 274:	21 15       	cp	r18, r1
 276:	31 05       	cpc	r19, r1
 278:	81 f7       	brne	.-32     	; 0x25a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 27a:	bf ef       	ldi	r27, 0xFF	; 255
 27c:	0f 3f       	cpi	r16, 0xFF	; 255
 27e:	1b 07       	cpc	r17, r27
 280:	79 f4       	brne	.+30     	; 0x2a0 <LCDWriteInt+0x74>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 286:	ae 01       	movw	r20, r28
 288:	4f 5f       	subi	r20, 0xFF	; 255
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCDWriteInt+0x66>
 28e:	2f 5f       	subi	r18, 0xFF	; 255
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	fa 01       	movw	r30, r20
 294:	e2 0f       	add	r30, r18
 296:	f3 1f       	adc	r31, r19
 298:	80 81       	ld	r24, Z
 29a:	88 23       	and	r24, r24
 29c:	c1 f3       	breq	.-16     	; 0x28e <LCDWriteInt+0x62>
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2a0:	25 e0       	ldi	r18, 0x05	; 5
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	20 1b       	sub	r18, r16
 2a6:	31 0b       	sbc	r19, r17
 2a8:	7e 01       	movw	r14, r28
 2aa:	08 94       	sec
 2ac:	e1 1c       	adc	r14, r1
 2ae:	f1 1c       	adc	r15, r1
 2b0:	e2 0e       	add	r14, r18
 2b2:	f3 1e       	adc	r15, r19
 2b4:	89 01       	movw	r16, r18
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2b8:	f7 01       	movw	r30, r14
 2ba:	81 91       	ld	r24, Z+
 2bc:	7f 01       	movw	r14, r30
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	80 5d       	subi	r24, 0xD0	; 208
 2c2:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	05 30       	cpi	r16, 0x05	; 5
 2cc:	11 05       	cpc	r17, r1
 2ce:	a4 f3       	brlt	.-24     	; 0x2b8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	cf 91       	pop	r28
 2dc:	df 91       	pop	r29
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	08 95       	ret

000002e8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 2e8:	88 32       	cpi	r24, 0x28	; 40
 2ea:	30 f4       	brcc	.+12     	; 0x2f8 <LCDGotoXY+0x10>
 if(x<40)
 {
  if(y) x|=0b01000000;
 2ec:	61 11       	cpse	r22, r1
 2ee:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDByte>
 2f8:	08 95       	ret

000002fa <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 2fa:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 2fc:	80 81       	ld	r24, Z
 2fe:	80 76       	andi	r24, 0x60	; 96
 300:	80 32       	cpi	r24, 0x20	; 32
 302:	e1 f4       	brne	.+56     	; 0x33c <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 304:	81 81       	ldd	r24, Z+1	; 0x01
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	41 f4       	brne	.+16     	; 0x31a <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 30a:	86 e6       	ldi	r24, 0x66	; 102
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 87 00 	sts	0x0087, r25
 312:	80 93 86 00 	sts	0x0086, r24
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	41 f4       	brne	.+16     	; 0x32e <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 31e:	8a e6       	ldi	r24, 0x6A	; 106
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 87 00 	sts	0x0087, r25
 326:	80 93 86 00 	sts	0x0086, r24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 32e:	8a 30       	cpi	r24, 0x0A	; 10
 330:	29 f4       	brne	.+10     	; 0x33c <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
 332:	83 81       	ldd	r24, Z+3	; 0x03
 334:	80 93 6a 00 	sts	0x006A, r24
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
 33e:	08 95       	ret

00000340 <main>:

/* ------------------------------------------------------------------------- */

int __attribute__((noreturn)) main(void)
{
 340:	2e e0       	ldi	r18, 0x0E	; 14
 342:	88 e1       	ldi	r24, 0x18	; 24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	a8 95       	wdr
 34c:	81 bd       	out	0x21, r24	; 33
 34e:	0f be       	out	0x3f, r0	; 63
 350:	21 bd       	out	0x21, r18	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 352:	0e 94 41 03 	call	0x682	; 0x682 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 356:	8c 9a       	sbi	0x11, 4	; 17
 358:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35a:	4a ef       	ldi	r20, 0xFA	; 250
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	04 c0       	rjmp	.+8      	; 0x368 <main+0x28>
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 360:	a8 95       	wdr
 362:	ca 01       	movw	r24, r20
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x24>
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	d1 f7       	brne	.-12     	; 0x360 <main+0x20>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 36c:	8c 98       	cbi	0x11, 4	; 17
    sei();
 36e:	78 94       	sei
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 370:	a8 95       	wdr
        usbPoll();
 372:	0e 94 4e 03 	call	0x69c	; 0x69c <usbPoll>
        if(usbInterruptIsReady()){
 376:	80 91 77 00 	lds	r24, 0x0077
 37a:	84 ff       	sbrs	r24, 4
 37c:	f9 cf       	rjmp	.-14     	; 0x370 <main+0x30>
static void advanceCircleByFixedAngle(void)
{
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
 37e:	40 91 64 00 	lds	r20, 0x0064
 382:	50 91 65 00 	lds	r21, 0x0065
 386:	14 16       	cp	r1, r20
 388:	15 06       	cpc	r1, r21
 38a:	1c f0       	brlt	.+6      	; 0x392 <main+0x52>
 38c:	80 ee       	ldi	r24, 0xE0	; 224
 38e:	9f ef       	ldi	r25, 0xFF	; 255
 390:	02 c0       	rjmp	.+4      	; 0x396 <main+0x56>
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	84 0f       	add	r24, r20
 398:	95 1f       	adc	r25, r21
 39a:	36 e0       	ldi	r19, 0x06	; 6
 39c:	95 95       	asr	r25
 39e:	87 95       	ror	r24
 3a0:	3a 95       	dec	r19
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x5c>
 3a4:	80 93 67 00 	sts	0x0067, r24
    sinus += d;
 3a8:	20 91 60 00 	lds	r18, 0x0060
 3ac:	30 91 61 00 	lds	r19, 0x0061
 3b0:	28 0f       	add	r18, r24
 3b2:	31 1d       	adc	r19, r1
 3b4:	30 93 61 00 	sts	0x0061, r19
 3b8:	20 93 60 00 	sts	0x0060, r18
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 3bc:	12 16       	cp	r1, r18
 3be:	13 06       	cpc	r1, r19
 3c0:	1c f0       	brlt	.+6      	; 0x3c8 <main+0x88>
 3c2:	80 ee       	ldi	r24, 0xE0	; 224
 3c4:	9f ef       	ldi	r25, 0xFF	; 255
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <main+0x8c>
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	26 e0       	ldi	r18, 0x06	; 6
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	2a 95       	dec	r18
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x92>
 3da:	80 93 68 00 	sts	0x0068, r24
    cosinus -= d;
 3de:	48 1b       	sub	r20, r24
 3e0:	51 09       	sbc	r21, r1
 3e2:	50 93 65 00 	sts	0x0065, r21
 3e6:	40 93 64 00 	sts	0x0064, r20
        usbPoll();
        if(usbInterruptIsReady()){
            /* called after every poll of the interrupt endpoint */
            advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	86 e6       	ldi	r24, 0x66	; 102
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <usbSetInterrupt>
 3f4:	bd cf       	rjmp	.-134    	; 0x370 <main+0x30>

000003f6 <usbCrc16>:
 3f6:	a8 2f       	mov	r26, r24
 3f8:	b9 2f       	mov	r27, r25
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	50 ea       	ldi	r21, 0xA0	; 160
 402:	60 95       	com	r22
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	09 c0       	rjmp	.+18     	; 0x41a <usbCrcLoopEntry>

00000408 <usbCrcByteLoop>:
 408:	2d 91       	ld	r18, X+
 40a:	82 27       	eor	r24, r18

0000040c <usbCrcBitLoop>:
 40c:	97 95       	ror	r25
 40e:	87 95       	ror	r24
 410:	10 f0       	brcs	.+4      	; 0x416 <usbCrcNoXor>
 412:	84 27       	eor	r24, r20
 414:	95 27       	eor	r25, r21

00000416 <usbCrcNoXor>:
 416:	30 5e       	subi	r19, 0xE0	; 224
 418:	c8 f3       	brcs	.-14     	; 0x40c <usbCrcBitLoop>

0000041a <usbCrcLoopEntry>:
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	a8 f3       	brcs	.-22     	; 0x408 <usbCrcByteLoop>

0000041e <usbCrcReady>:
 41e:	08 95       	ret

00000420 <usbCrc16Append>:
 420:	ea df       	rcall	.-44     	; 0x3f6 <usbCrc16>
 422:	8d 93       	st	X+, r24
 424:	9d 93       	st	X+, r25
 426:	08 95       	ret

00000428 <__vector_1>:
 428:	cf 93       	push	r28
 42a:	cf b7       	in	r28, 0x3f	; 63
 42c:	cf 93       	push	r28

0000042e <waitForJ>:
 42e:	c3 95       	inc	r28
 430:	84 9b       	sbis	0x10, 4	; 16
 432:	e9 f7       	brne	.-6      	; 0x42e <waitForJ>

00000434 <waitForK>:
 434:	84 9b       	sbis	0x10, 4	; 16
 436:	09 c0       	rjmp	.+18     	; 0x44a <foundK>
 438:	84 9b       	sbis	0x10, 4	; 16
 43a:	07 c0       	rjmp	.+14     	; 0x44a <foundK>
 43c:	84 9b       	sbis	0x10, 4	; 16
 43e:	05 c0       	rjmp	.+10     	; 0x44a <foundK>
 440:	84 9b       	sbis	0x10, 4	; 16
 442:	03 c0       	rjmp	.+6      	; 0x44a <foundK>
 444:	84 9b       	sbis	0x10, 4	; 16
 446:	01 c0       	rjmp	.+2      	; 0x44a <foundK>
 448:	a1 c0       	rjmp	.+322    	; 0x58c <sofError>

0000044a <foundK>:
 44a:	df 93       	push	r29
 44c:	c0 91 85 00 	lds	r28, 0x0085
 450:	dd 27       	eor	r29, r29
 452:	c4 57       	subi	r28, 0x74	; 116
 454:	df 4f       	sbci	r29, 0xFF	; 255
 456:	84 9b       	sbis	0x10, 4	; 16
 458:	02 c0       	rjmp	.+4      	; 0x45e <haveTwoBitsK>
 45a:	df 91       	pop	r29
 45c:	eb cf       	rjmp	.-42     	; 0x434 <waitForK>

0000045e <haveTwoBitsK>:
 45e:	2f 93       	push	r18
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	00 b3       	in	r16, 0x10	; 16
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	04 fb       	bst	r16, 4
 46a:	20 f9       	bld	r18, 0
 46c:	4f 93       	push	r20
 46e:	3f 93       	push	r19
 470:	10 b3       	in	r17, 0x10	; 16
 472:	4f ef       	ldi	r20, 0xFF	; 255
 474:	01 27       	eor	r16, r17
 476:	04 fb       	bst	r16, 4
 478:	21 f9       	bld	r18, 1
 47a:	3b e0       	ldi	r19, 0x0B	; 11
 47c:	31 c0       	rjmp	.+98     	; 0x4e0 <rxbit2>

0000047e <unstuff0>:
 47e:	4e 7f       	andi	r20, 0xFE	; 254
 480:	01 2f       	mov	r16, r17
 482:	10 b3       	in	r17, 0x10	; 16
 484:	21 60       	ori	r18, 0x01	; 1
 486:	28 c0       	rjmp	.+80     	; 0x4d8 <didUnstuff0>

00000488 <unstuff1>:
 488:	10 2f       	mov	r17, r16
 48a:	4d 7f       	andi	r20, 0xFD	; 253
 48c:	22 60       	ori	r18, 0x02	; 2
 48e:	00 00       	nop
 490:	00 b3       	in	r16, 0x10	; 16
 492:	29 c0       	rjmp	.+82     	; 0x4e6 <didUnstuff1>

00000494 <unstuff2>:
 494:	4b 7f       	andi	r20, 0xFB	; 251
 496:	24 60       	ori	r18, 0x04	; 4
 498:	01 2f       	mov	r16, r17
 49a:	00 00       	nop
 49c:	10 b3       	in	r17, 0x10	; 16
 49e:	2b c0       	rjmp	.+86     	; 0x4f6 <didUnstuff2>

000004a0 <unstuff3>:
 4a0:	10 b3       	in	r17, 0x10	; 16
 4a2:	47 7f       	andi	r20, 0xF7	; 247
 4a4:	28 60       	ori	r18, 0x08	; 8
 4a6:	2a c0       	rjmp	.+84     	; 0x4fc <didUnstuff3>

000004a8 <unstuff4>:
 4a8:	4f 7e       	andi	r20, 0xEF	; 239
 4aa:	00 b3       	in	r16, 0x10	; 16
 4ac:	20 61       	ori	r18, 0x10	; 16
 4ae:	2c c0       	rjmp	.+88     	; 0x508 <didUnstuff4>

000004b0 <unstuff5>:
 4b0:	4f 7d       	andi	r20, 0xDF	; 223
 4b2:	10 b3       	in	r17, 0x10	; 16
 4b4:	20 62       	ori	r18, 0x20	; 32
 4b6:	2f c0       	rjmp	.+94     	; 0x516 <didUnstuff5>

000004b8 <unstuff6>:
 4b8:	4f 7b       	andi	r20, 0xBF	; 191
 4ba:	00 b3       	in	r16, 0x10	; 16
 4bc:	20 64       	ori	r18, 0x40	; 64
 4be:	32 c0       	rjmp	.+100    	; 0x524 <didUnstuff6>

000004c0 <rxLoop>:
 4c0:	42 27       	eor	r20, r18
 4c2:	00 b3       	in	r16, 0x10	; 16
 4c4:	49 93       	st	Y+, r20
 4c6:	4f ef       	ldi	r20, 0xFF	; 255
 4c8:	00 00       	nop
 4ca:	10 27       	eor	r17, r16
 4cc:	14 fb       	bst	r17, 4
 4ce:	20 f9       	bld	r18, 0
 4d0:	10 b3       	in	r17, 0x10	; 16
 4d2:	14 71       	andi	r17, 0x14	; 20
 4d4:	c9 f1       	breq	.+114    	; 0x548 <se0>
 4d6:	29 7f       	andi	r18, 0xF9	; 249

000004d8 <didUnstuff0>:
 4d8:	91 f2       	breq	.-92     	; 0x47e <unstuff0>
 4da:	01 27       	eor	r16, r17
 4dc:	04 fb       	bst	r16, 4
 4de:	21 f9       	bld	r18, 1

000004e0 <rxbit2>:
 4e0:	00 b3       	in	r16, 0x10	; 16
 4e2:	23 7f       	andi	r18, 0xF3	; 243
 4e4:	89 f2       	breq	.-94     	; 0x488 <unstuff1>

000004e6 <didUnstuff1>:
 4e6:	31 50       	subi	r19, 0x01	; 1
 4e8:	58 f1       	brcs	.+86     	; 0x540 <overflow>
 4ea:	10 27       	eor	r17, r16
 4ec:	14 fb       	bst	r17, 4
 4ee:	22 f9       	bld	r18, 2
 4f0:	10 b3       	in	r17, 0x10	; 16
 4f2:	27 7e       	andi	r18, 0xE7	; 231
 4f4:	79 f2       	breq	.-98     	; 0x494 <unstuff2>

000004f6 <didUnstuff2>:
 4f6:	01 27       	eor	r16, r17
 4f8:	04 fb       	bst	r16, 4
 4fa:	23 f9       	bld	r18, 3

000004fc <didUnstuff3>:
 4fc:	2f 7c       	andi	r18, 0xCF	; 207
 4fe:	81 f2       	breq	.-96     	; 0x4a0 <unstuff3>
 500:	00 b3       	in	r16, 0x10	; 16
 502:	10 27       	eor	r17, r16
 504:	14 fb       	bst	r17, 4
 506:	24 f9       	bld	r18, 4

00000508 <didUnstuff4>:
 508:	2f 79       	andi	r18, 0x9F	; 159
 50a:	71 f2       	breq	.-100    	; 0x4a8 <unstuff4>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <didUnstuff4+0x6>
 50e:	10 b3       	in	r17, 0x10	; 16
 510:	01 27       	eor	r16, r17
 512:	04 fb       	bst	r16, 4
 514:	25 f9       	bld	r18, 5

00000516 <didUnstuff5>:
 516:	2f 73       	andi	r18, 0x3F	; 63
 518:	59 f2       	breq	.-106    	; 0x4b0 <unstuff5>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <didUnstuff5+0x6>
 51c:	00 b3       	in	r16, 0x10	; 16
 51e:	10 27       	eor	r17, r16
 520:	14 fb       	bst	r17, 4
 522:	26 f9       	bld	r18, 6

00000524 <didUnstuff6>:
 524:	22 30       	cpi	r18, 0x02	; 2
 526:	40 f2       	brcs	.-112    	; 0x4b8 <unstuff6>
 528:	00 c0       	rjmp	.+0      	; 0x52a <didUnstuff6+0x6>
 52a:	10 b3       	in	r17, 0x10	; 16
 52c:	01 27       	eor	r16, r17
 52e:	04 fb       	bst	r16, 4
 530:	27 f9       	bld	r18, 7

00000532 <didUnstuff7>:
 532:	24 30       	cpi	r18, 0x04	; 4
 534:	28 f6       	brcc	.-118    	; 0x4c0 <rxLoop>

00000536 <unstuff7>:
 536:	4f 77       	andi	r20, 0x7F	; 127
 538:	20 68       	ori	r18, 0x80	; 128
 53a:	10 b3       	in	r17, 0x10	; 16
 53c:	00 00       	nop
 53e:	f9 cf       	rjmp	.-14     	; 0x532 <didUnstuff7>

00000540 <overflow>:
 540:	10 e4       	ldi	r17, 0x40	; 64
 542:	1a bf       	out	0x3a, r17	; 58

00000544 <ignorePacket>:
 544:	00 27       	eor	r16, r16
 546:	17 c0       	rjmp	.+46     	; 0x576 <handleSetupOrOut>

00000548 <se0>:
 548:	3b 50       	subi	r19, 0x0B	; 11
 54a:	31 95       	neg	r19
 54c:	c3 1b       	sub	r28, r19
 54e:	d0 40       	sbci	r29, 0x00	; 0
 550:	10 e4       	ldi	r17, 0x40	; 64
 552:	1a bf       	out	0x3a, r17	; 58
 554:	08 81       	ld	r16, Y
 556:	03 3c       	cpi	r16, 0xC3	; 195
 558:	e9 f0       	breq	.+58     	; 0x594 <handleData>
 55a:	0b 34       	cpi	r16, 0x4B	; 75
 55c:	d9 f0       	breq	.+54     	; 0x594 <handleData>
 55e:	20 91 83 00 	lds	r18, 0x0083
 562:	19 81       	ldd	r17, Y+1	; 0x01
 564:	11 0f       	add	r17, r17
 566:	12 13       	cpse	r17, r18
 568:	ed cf       	rjmp	.-38     	; 0x544 <ignorePacket>
 56a:	09 36       	cpi	r16, 0x69	; 105
 56c:	41 f1       	breq	.+80     	; 0x5be <handleIn>
 56e:	0d 32       	cpi	r16, 0x2D	; 45
 570:	11 f0       	breq	.+4      	; 0x576 <handleSetupOrOut>
 572:	01 3e       	cpi	r16, 0xE1	; 225
 574:	39 f7       	brne	.-50     	; 0x544 <ignorePacket>

00000576 <handleSetupOrOut>:
 576:	00 93 8a 00 	sts	0x008A, r16

0000057a <doReturn>:
 57a:	3f 91       	pop	r19
 57c:	4f 91       	pop	r20
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	2f 91       	pop	r18
 584:	df 91       	pop	r29
 586:	ca b7       	in	r28, 0x3a	; 58
 588:	c6 fd       	sbrc	r28, 6
 58a:	51 cf       	rjmp	.-350    	; 0x42e <waitForJ>

0000058c <sofError>:
 58c:	cf 91       	pop	r28
 58e:	cf bf       	out	0x3f, r28	; 63
 590:	cf 91       	pop	r28
 592:	18 95       	reti

00000594 <handleData>:
 594:	20 91 8a 00 	lds	r18, 0x008A
 598:	22 23       	and	r18, r18
 59a:	79 f3       	breq	.-34     	; 0x57a <doReturn>
 59c:	10 91 88 00 	lds	r17, 0x0088
 5a0:	11 23       	and	r17, r17
 5a2:	11 f5       	brne	.+68     	; 0x5e8 <sendNakAndReti>
 5a4:	34 30       	cpi	r19, 0x04	; 4
 5a6:	12 f1       	brmi	.+68     	; 0x5ec <sendAckAndReti>
 5a8:	30 93 88 00 	sts	0x0088, r19
 5ac:	20 93 84 00 	sts	0x0084, r18
 5b0:	10 91 85 00 	lds	r17, 0x0085
 5b4:	3b e0       	ldi	r19, 0x0B	; 11
 5b6:	31 1b       	sub	r19, r17
 5b8:	30 93 85 00 	sts	0x0085, r19
 5bc:	17 c0       	rjmp	.+46     	; 0x5ec <sendAckAndReti>

000005be <handleIn>:
 5be:	00 91 88 00 	lds	r16, 0x0088
 5c2:	01 30       	cpi	r16, 0x01	; 1
 5c4:	8c f4       	brge	.+34     	; 0x5e8 <sendNakAndReti>
 5c6:	0a e5       	ldi	r16, 0x5A	; 90
 5c8:	30 91 62 00 	lds	r19, 0x0062
 5cc:	34 fd       	sbrc	r19, 4
 5ce:	10 c0       	rjmp	.+32     	; 0x5f0 <sendCntAndReti>
 5d0:	00 93 62 00 	sts	0x0062, r16
 5d4:	cc e6       	ldi	r28, 0x6C	; 108
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <usbSendAndReti>

000005da <stuffN1Delay>:
 5da:	27 95       	ror	r18
 5dc:	a8 f4       	brcc	.+42     	; 0x608 <doExorN1>
 5de:	51 50       	subi	r21, 0x01	; 1
 5e0:	a9 f4       	brne	.+42     	; 0x60c <commonN1>
 5e2:	22 0f       	add	r18, r18
 5e4:	00 00       	nop
 5e6:	f9 cf       	rjmp	.-14     	; 0x5da <stuffN1Delay>

000005e8 <sendNakAndReti>:
 5e8:	4a e5       	ldi	r20, 0x5A	; 90
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <usbSendX3>

000005ec <sendAckAndReti>:
 5ec:	42 ed       	ldi	r20, 0xD2	; 210
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <usbSendX3>

000005f0 <sendCntAndReti>:
 5f0:	43 2f       	mov	r20, r19

000005f2 <usbSendX3>:
 5f2:	c4 e1       	ldi	r28, 0x14	; 20
 5f4:	d0 e0       	ldi	r29, 0x00	; 0
 5f6:	32 e0       	ldi	r19, 0x02	; 2

000005f8 <usbSendAndReti>:
 5f8:	11 b3       	in	r17, 0x11	; 17
 5fa:	14 61       	ori	r17, 0x14	; 20
 5fc:	94 9a       	sbi	0x12, 4	; 18
 5fe:	11 bb       	out	0x11, r17	; 17
 600:	02 b3       	in	r16, 0x12	; 18
 602:	20 e4       	ldi	r18, 0x40	; 64
 604:	14 e1       	ldi	r17, 0x14	; 20
 606:	5f 93       	push	r21

00000608 <doExorN1>:
 608:	01 27       	eor	r16, r17
 60a:	56 e0       	ldi	r21, 0x06	; 6

0000060c <commonN1>:
 60c:	02 bb       	out	0x12, r16	; 18
 60e:	27 95       	ror	r18
 610:	20 f4       	brcc	.+8      	; 0x61a <doExorN2>
 612:	51 50       	subi	r21, 0x01	; 1
 614:	21 f4       	brne	.+8      	; 0x61e <commonN2>
 616:	22 0f       	add	r18, r18
 618:	f9 cf       	rjmp	.-14     	; 0x60c <commonN1>

0000061a <doExorN2>:
 61a:	01 27       	eor	r16, r17
 61c:	56 e0       	ldi	r21, 0x06	; 6

0000061e <commonN2>:
 61e:	00 00       	nop
 620:	3b 5a       	subi	r19, 0xAB	; 171
 622:	02 bb       	out	0x12, r16	; 18
 624:	d0 f2       	brcs	.-76     	; 0x5da <stuffN1Delay>

00000626 <stuff6Delay>:
 626:	27 95       	ror	r18
 628:	28 f4       	brcc	.+10     	; 0x634 <doExor6>
 62a:	51 50       	subi	r21, 0x01	; 1
 62c:	29 f4       	brne	.+10     	; 0x638 <common6>
 62e:	22 0f       	add	r18, r18
 630:	00 00       	nop
 632:	f9 cf       	rjmp	.-14     	; 0x626 <stuff6Delay>

00000634 <doExor6>:
 634:	01 27       	eor	r16, r17
 636:	56 e0       	ldi	r21, 0x06	; 6

00000638 <common6>:
 638:	27 95       	ror	r18
 63a:	02 bb       	out	0x12, r16	; 18
 63c:	20 f4       	brcc	.+8      	; 0x646 <doExor7>
 63e:	51 50       	subi	r21, 0x01	; 1
 640:	21 f4       	brne	.+8      	; 0x64a <common7>
 642:	22 0f       	add	r18, r18
 644:	f9 cf       	rjmp	.-14     	; 0x638 <common6>

00000646 <doExor7>:
 646:	01 27       	eor	r16, r17
 648:	56 e0       	ldi	r21, 0x06	; 6

0000064a <common7>:
 64a:	29 91       	ld	r18, Y+
 64c:	33 23       	and	r19, r19
 64e:	02 bb       	out	0x12, r16	; 18
 650:	21 f6       	brne	.-120    	; 0x5da <stuffN1Delay>
 652:	0b 7e       	andi	r16, 0xEB	; 235
 654:	10 91 89 00 	lds	r17, 0x0089
 658:	11 0f       	add	r17, r17
 65a:	c6 51       	subi	r28, 0x16	; 22
 65c:	d0 40       	sbci	r29, 0x00	; 0
 65e:	02 bb       	out	0x12, r16	; 18
 660:	11 f0       	breq	.+4      	; 0x666 <skipAddrAssign>
 662:	10 93 83 00 	sts	0x0083, r17

00000666 <skipAddrAssign>:
 666:	10 e4       	ldi	r17, 0x40	; 64
 668:	1a bf       	out	0x3a, r17	; 58
 66a:	00 61       	ori	r16, 0x10	; 16
 66c:	11 b3       	in	r17, 0x11	; 17
 66e:	1b 7e       	andi	r17, 0xEB	; 235
 670:	40 2f       	mov	r20, r16
 672:	4b 7e       	andi	r20, 0xEB	; 235
 674:	5f 91       	pop	r21
 676:	00 c0       	rjmp	.+0      	; 0x678 <skipAddrAssign+0x12>
 678:	00 c0       	rjmp	.+0      	; 0x67a <skipAddrAssign+0x14>
 67a:	02 bb       	out	0x12, r16	; 18
 67c:	11 bb       	out	0x11, r17	; 17
 67e:	42 bb       	out	0x12, r20	; 18
 680:	7c cf       	rjmp	.-264    	; 0x57a <doReturn>

00000682 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 682:	85 b7       	in	r24, 0x35	; 53
 684:	82 60       	ori	r24, 0x02	; 2
 686:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 688:	8b b7       	in	r24, 0x3b	; 59
 68a:	80 64       	ori	r24, 0x40	; 64
 68c:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 68e:	8b e4       	ldi	r24, 0x4B	; 75
 690:	80 93 78 00 	sts	0x0078, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 694:	8a e5       	ldi	r24, 0x5A	; 90
 696:	80 93 77 00 	sts	0x0077, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 69a:	08 95       	ret

0000069c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 6a2:	90 91 88 00 	lds	r25, 0x0088
 6a6:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 6a8:	97 fd       	sbrc	r25, 7
 6aa:	a2 c0       	rjmp	.+324    	; 0x7f0 <usbPoll+0x154>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6ac:	20 91 85 00 	lds	r18, 0x0085
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 6b0:	80 91 84 00 	lds	r24, 0x0084
 6b4:	8d 32       	cpi	r24, 0x2D	; 45
 6b6:	09 f0       	breq	.+2      	; 0x6ba <usbPoll+0x1e>
 6b8:	99 c0       	rjmp	.+306    	; 0x7ec <usbPoll+0x150>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 6ba:	98 30       	cpi	r25, 0x08	; 8
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <usbPoll+0x24>
 6be:	96 c0       	rjmp	.+300    	; 0x7ec <usbPoll+0x150>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6c0:	cc e0       	ldi	r28, 0x0C	; 12
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
 6c4:	c2 1b       	sub	r28, r18
 6c6:	d1 09       	sbc	r29, r1
 6c8:	c4 57       	subi	r28, 0x74	; 116
 6ca:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6cc:	83 ec       	ldi	r24, 0xC3	; 195
 6ce:	80 93 6c 00 	sts	0x006C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6d2:	8a e5       	ldi	r24, 0x5A	; 90
 6d4:	80 93 62 00 	sts	0x0062, r24
        usbMsgFlags = 0;
 6d8:	10 92 6b 00 	sts	0x006B, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6dc:	88 81       	ld	r24, Y
 6de:	80 76       	andi	r24, 0x60	; 96
 6e0:	29 f0       	breq	.+10     	; 0x6ec <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 6e2:	ce 01       	movw	r24, r28
 6e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <usbFunctionSetup>
 6e8:	28 2f       	mov	r18, r24
 6ea:	77 c0       	rjmp	.+238    	; 0x7da <usbPoll+0x13e>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6ee:	10 92 75 00 	sts	0x0075, r1
    SWITCH_START(rq->bRequest)
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6f4:	88 23       	and	r24, r24
 6f6:	21 f4       	brne	.+8      	; 0x700 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6f8:	10 92 76 00 	sts	0x0076, r1
 6fc:	22 e0       	ldi	r18, 0x02	; 2
 6fe:	67 c0       	rjmp	.+206    	; 0x7ce <usbPoll+0x132>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 700:	85 30       	cpi	r24, 0x05	; 5
 702:	19 f4       	brne	.+6      	; 0x70a <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 704:	90 93 89 00 	sts	0x0089, r25
 708:	61 c0       	rjmp	.+194    	; 0x7cc <usbPoll+0x130>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 70a:	86 30       	cpi	r24, 0x06	; 6
 70c:	09 f0       	breq	.+2      	; 0x710 <usbPoll+0x74>
 70e:	4a c0       	rjmp	.+148    	; 0x7a4 <usbPoll+0x108>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 710:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	41 f4       	brne	.+16     	; 0x726 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 716:	84 ea       	ldi	r24, 0xA4	; 164
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	90 93 87 00 	sts	0x0087, r25
 71e:	80 93 86 00 	sts	0x0086, r24
 722:	22 e1       	ldi	r18, 0x12	; 18
 724:	3b c0       	rjmp	.+118    	; 0x79c <usbPoll+0x100>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	41 f4       	brne	.+16     	; 0x73a <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 72a:	86 eb       	ldi	r24, 0xB6	; 182
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	90 93 87 00 	sts	0x0087, r25
 732:	80 93 86 00 	sts	0x0086, r24
 736:	22 e2       	ldi	r18, 0x22	; 34
 738:	31 c0       	rjmp	.+98     	; 0x79c <usbPoll+0x100>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 73a:	83 30       	cpi	r24, 0x03	; 3
 73c:	d1 f4       	brne	.+52     	; 0x772 <usbPoll+0xd6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 740:	88 23       	and	r24, r24
 742:	41 f4       	brne	.+16     	; 0x754 <usbPoll+0xb8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 744:	88 e8       	ldi	r24, 0x88	; 136
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	90 93 87 00 	sts	0x0087, r25
 74c:	80 93 86 00 	sts	0x0086, r24
 750:	24 e0       	ldi	r18, 0x04	; 4
 752:	24 c0       	rjmp	.+72     	; 0x79c <usbPoll+0x100>
        SWITCH_CASE(1)
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	19 f4       	brne	.+6      	; 0x75e <usbPoll+0xc2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 758:	8c e8       	ldi	r24, 0x8C	; 140
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	04 c0       	rjmp	.+8      	; 0x766 <usbPoll+0xca>
        SWITCH_CASE(2)
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	e1 f4       	brne	.+56     	; 0x79a <usbPoll+0xfe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 762:	88 e9       	ldi	r24, 0x98	; 152
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 87 00 	sts	0x0087, r25
 76a:	80 93 86 00 	sts	0x0086, r24
 76e:	2c e0       	ldi	r18, 0x0C	; 12
 770:	15 c0       	rjmp	.+42     	; 0x79c <usbPoll+0x100>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 772:	81 32       	cpi	r24, 0x21	; 33
 774:	41 f4       	brne	.+16     	; 0x786 <usbPoll+0xea>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 776:	88 ec       	ldi	r24, 0xC8	; 200
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	90 93 87 00 	sts	0x0087, r25
 77e:	80 93 86 00 	sts	0x0086, r24
 782:	29 e0       	ldi	r18, 0x09	; 9
 784:	0b c0       	rjmp	.+22     	; 0x79c <usbPoll+0x100>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 786:	82 32       	cpi	r24, 0x22	; 34
 788:	41 f4       	brne	.+16     	; 0x79a <usbPoll+0xfe>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 78a:	84 e5       	ldi	r24, 0x54	; 84
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	90 93 87 00 	sts	0x0087, r25
 792:	80 93 86 00 	sts	0x0086, r24
 796:	24 e3       	ldi	r18, 0x34	; 52
 798:	01 c0       	rjmp	.+2      	; 0x79c <usbPoll+0x100>
 79a:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 79c:	80 e4       	ldi	r24, 0x40	; 64
 79e:	80 93 6b 00 	sts	0x006B, r24
 7a2:	1b c0       	rjmp	.+54     	; 0x7da <usbPoll+0x13e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 7a4:	88 30       	cpi	r24, 0x08	; 8
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <usbPoll+0x114>
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	8b e8       	ldi	r24, 0x8B	; 139
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <usbPoll+0x136>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 7b0:	89 30       	cpi	r24, 0x09	; 9
 7b2:	19 f4       	brne	.+6      	; 0x7ba <usbPoll+0x11e>
        usbConfiguration = value;
 7b4:	90 93 8b 00 	sts	0x008B, r25
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <usbPoll+0x130>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 7ba:	8a 30       	cpi	r24, 0x0A	; 10
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <usbPoll+0x126>
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	06 c0       	rjmp	.+12     	; 0x7ce <usbPoll+0x132>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 7c2:	8b 30       	cpi	r24, 0x0B	; 11
 7c4:	19 f4       	brne	.+6      	; 0x7cc <usbPoll+0x130>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7c6:	8b e4       	ldi	r24, 0x4B	; 75
 7c8:	80 93 78 00 	sts	0x0078, r24
 7cc:	20 e0       	ldi	r18, 0x00	; 0
 7ce:	85 e7       	ldi	r24, 0x75	; 117
 7d0:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 7d2:	90 93 87 00 	sts	0x0087, r25
 7d6:	80 93 86 00 	sts	0x0086, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7da:	8f 81       	ldd	r24, Y+7	; 0x07
 7dc:	88 23       	and	r24, r24
 7de:	21 f4       	brne	.+8      	; 0x7e8 <usbPoll+0x14c>
 7e0:	8e 81       	ldd	r24, Y+6	; 0x06
 7e2:	82 17       	cp	r24, r18
 7e4:	08 f4       	brcc	.+2      	; 0x7e8 <usbPoll+0x14c>
 7e6:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7e8:	20 93 63 00 	sts	0x0063, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 7ec:	10 92 88 00 	sts	0x0088, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 7f0:	80 91 62 00 	lds	r24, 0x0062
 7f4:	84 ff       	sbrs	r24, 4
 7f6:	4a c0       	rjmp	.+148    	; 0x88c <usbPoll+0x1f0>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 7f8:	80 91 63 00 	lds	r24, 0x0063
 7fc:	8f 3f       	cpi	r24, 0xFF	; 255
 7fe:	09 f4       	brne	.+2      	; 0x802 <usbPoll+0x166>
 800:	45 c0       	rjmp	.+138    	; 0x88c <usbPoll+0x1f0>
 802:	18 2f       	mov	r17, r24
 804:	89 30       	cpi	r24, 0x09	; 9
 806:	08 f0       	brcs	.+2      	; 0x80a <usbPoll+0x16e>
 808:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 80a:	81 1b       	sub	r24, r17
 80c:	80 93 63 00 	sts	0x0063, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 810:	80 91 6c 00 	lds	r24, 0x006C
 814:	98 e8       	ldi	r25, 0x88	; 136
 816:	89 27       	eor	r24, r25
 818:	80 93 6c 00 	sts	0x006C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 81c:	11 23       	and	r17, r17
 81e:	41 f1       	breq	.+80     	; 0x870 <usbPoll+0x1d4>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 820:	20 91 86 00 	lds	r18, 0x0086
 824:	30 91 87 00 	lds	r19, 0x0087
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 828:	80 91 6b 00 	lds	r24, 0x006B
 82c:	86 ff       	sbrs	r24, 6
 82e:	0d c0       	rjmp	.+26     	; 0x84a <usbPoll+0x1ae>
 830:	ad e6       	ldi	r26, 0x6D	; 109
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 838:	f9 01       	movw	r30, r18
 83a:	e8 0f       	add	r30, r24
 83c:	f9 1f       	adc	r31, r25
 83e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 840:	ed 93       	st	X+, r30
 842:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 844:	18 17       	cp	r17, r24
 846:	c1 f7       	brne	.-16     	; 0x838 <usbPoll+0x19c>
 848:	08 c0       	rjmp	.+16     	; 0x85a <usbPoll+0x1be>
 84a:	91 2f       	mov	r25, r17
 84c:	d9 01       	movw	r26, r18
 84e:	ed e6       	ldi	r30, 0x6D	; 109
 850:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 852:	8d 91       	ld	r24, X+
 854:	81 93       	st	Z+, r24
                }while(--i);
 856:	91 50       	subi	r25, 0x01	; 1
 858:	e1 f7       	brne	.-8      	; 0x852 <usbPoll+0x1b6>
 85a:	11 50       	subi	r17, 0x01	; 1
 85c:	81 2f       	mov	r24, r17
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	1f 5f       	subi	r17, 0xFF	; 255
 862:	01 96       	adiw	r24, 0x01	; 1
 864:	82 0f       	add	r24, r18
 866:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 868:	90 93 87 00 	sts	0x0087, r25
 86c:	80 93 86 00 	sts	0x0086, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 870:	61 2f       	mov	r22, r17
 872:	8d e6       	ldi	r24, 0x6D	; 109
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 10 02 	call	0x420	; 0x420 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 87a:	61 2f       	mov	r22, r17
 87c:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 87e:	6c 30       	cpi	r22, 0x0C	; 12
 880:	19 f0       	breq	.+6      	; 0x888 <usbPoll+0x1ec>
            usbMsgLen = USB_NO_MSG;
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	80 93 63 00 	sts	0x0063, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 888:	60 93 62 00 	sts	0x0062, r22
 88c:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 88e:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 890:	84 71       	andi	r24, 0x14	; 20
 892:	31 f4       	brne	.+12     	; 0x8a0 <usbPoll+0x204>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 894:	91 50       	subi	r25, 0x01	; 1
 896:	d9 f7       	brne	.-10     	; 0x88e <usbPoll+0x1f2>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 898:	10 92 89 00 	sts	0x0089, r1
    usbDeviceAddr = 0;
 89c:	10 92 83 00 	sts	0x0083, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	08 95       	ret

000008a8 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 8a8:	1f 93       	push	r17
 8aa:	dc 01       	movw	r26, r24
 8ac:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 8ae:	80 91 77 00 	lds	r24, 0x0077
 8b2:	84 ff       	sbrs	r24, 4
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 8b6:	80 91 78 00 	lds	r24, 0x0078
 8ba:	98 e8       	ldi	r25, 0x88	; 136
 8bc:	89 27       	eor	r24, r25
 8be:	80 93 78 00 	sts	0x0078, r24
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 8c4:	8a e5       	ldi	r24, 0x5A	; 90
 8c6:	80 93 77 00 	sts	0x0077, r24
 8ca:	91 2f       	mov	r25, r17
 8cc:	e9 e7       	ldi	r30, 0x79	; 121
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 8d0:	8d 91       	ld	r24, X+
 8d2:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 8d8:	61 2f       	mov	r22, r17
 8da:	89 e7       	ldi	r24, 0x79	; 121
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 10 02 	call	0x420	; 0x420 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 8e2:	1c 5f       	subi	r17, 0xFC	; 252
 8e4:	10 93 77 00 	sts	0x0077, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 8e8:	1f 91       	pop	r17
 8ea:	08 95       	ret

000008ec <__divmodhi4>:
 8ec:	97 fb       	bst	r25, 7
 8ee:	09 2e       	mov	r0, r25
 8f0:	07 26       	eor	r0, r23
 8f2:	0a d0       	rcall	.+20     	; 0x908 <__divmodhi4_neg1>
 8f4:	77 fd       	sbrc	r23, 7
 8f6:	04 d0       	rcall	.+8      	; 0x900 <__divmodhi4_neg2>
 8f8:	0c d0       	rcall	.+24     	; 0x912 <__udivmodhi4>
 8fa:	06 d0       	rcall	.+12     	; 0x908 <__divmodhi4_neg1>
 8fc:	00 20       	and	r0, r0
 8fe:	1a f4       	brpl	.+6      	; 0x906 <__divmodhi4_exit>

00000900 <__divmodhi4_neg2>:
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255

00000906 <__divmodhi4_exit>:
 906:	08 95       	ret

00000908 <__divmodhi4_neg1>:
 908:	f6 f7       	brtc	.-4      	; 0x906 <__divmodhi4_exit>
 90a:	90 95       	com	r25
 90c:	81 95       	neg	r24
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__udivmodhi4>:
 912:	aa 1b       	sub	r26, r26
 914:	bb 1b       	sub	r27, r27
 916:	51 e1       	ldi	r21, 0x11	; 17
 918:	07 c0       	rjmp	.+14     	; 0x928 <__udivmodhi4_ep>

0000091a <__udivmodhi4_loop>:
 91a:	aa 1f       	adc	r26, r26
 91c:	bb 1f       	adc	r27, r27
 91e:	a6 17       	cp	r26, r22
 920:	b7 07       	cpc	r27, r23
 922:	10 f0       	brcs	.+4      	; 0x928 <__udivmodhi4_ep>
 924:	a6 1b       	sub	r26, r22
 926:	b7 0b       	sbc	r27, r23

00000928 <__udivmodhi4_ep>:
 928:	88 1f       	adc	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	5a 95       	dec	r21
 92e:	a9 f7       	brne	.-22     	; 0x91a <__udivmodhi4_loop>
 930:	80 95       	com	r24
 932:	90 95       	com	r25
 934:	bc 01       	movw	r22, r24
 936:	cd 01       	movw	r24, r26
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
