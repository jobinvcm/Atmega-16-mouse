
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000788  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800062  0000078a  000007fe  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000206  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f06  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e9  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085a  00000000  00000000  00001e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a6  00000000  00000000  00002ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00003149  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

00000054 <usbDescriptorString0>:
  54:	04 03 09 04                                         ....

00000058 <usbDescriptorStringVendor>:
  58:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  68:	74 00                                               t.

0000006a <usbDescriptorStringDevice>:
  6a:	12 03 54 00 65 00 6d 00 70 00 6c 00 61 00 74 00     ..T.e.m.p.l.a.t.
  7a:	65 00                                               e.

0000007c <usbDescriptorDevice>:
  7c:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
  8c:	00 01                                               ..

0000008e <usbDescriptorConfiguration>:
  8e:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 00 00     ........2.......
	...

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf e5       	ldi	r28, 0x5F	; 95
  a6:	d4 e0       	ldi	r29, 0x04	; 4
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	a0 e6       	ldi	r26, 0x60	; 96
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e8 e8       	ldi	r30, 0x88	; 136
  b4:	f7 e0       	ldi	r31, 0x07	; 7
  b6:	02 c0       	rjmp	.+4      	; 0xbc <.do_copy_data_start>

000000b8 <.do_copy_data_loop>:
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0

000000bc <.do_copy_data_start>:
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <.do_copy_data_loop>

000000c2 <__do_clear_bss>:
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	a2 e6       	ldi	r26, 0x62	; 98
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ad 38       	cpi	r26, 0x8D	; 141
  ce:	b1 07       	cpc	r27, r17
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  d6:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000de <usbFunctionSetup>:
#include "usbdrv.h"

#define F_CPU 16000000L
#include <util/delay.h>

USB_PUBLIC uchar usbFunctionSetup(uchar data[8]) {
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <main>:
        return 0; // do nothing for now
}

int main() {
  e2:	2e e0       	ldi	r18, 0x0E	; 14
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	a8 95       	wdr
  ee:	81 bd       	out	0x21, r24	; 33
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	21 bd       	out	0x21, r18	; 33
        uchar i;

    wdt_enable(WDTO_1S); // enable 1s watchdog timer

    usbInit();
  f4:	0e 94 b2 02 	call	0x564	; 0x564 <usbInit>

    usbDeviceDisconnect(); // enforce re-enumeration
  f8:	8c 9a       	sbi	0x11, 4	; 17
  fa:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fc:	40 e4       	ldi	r20, 0x40	; 64
  fe:	5f e1       	ldi	r21, 0x1F	; 31
    for(i = 0; i<250; i++) { // wait 500 ms
        wdt_reset(); // keep the watchdog happy
 100:	a8 95       	wdr
 102:	ca 01       	movw	r24, r20
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x22>
    wdt_enable(WDTO_1S); // enable 1s watchdog timer

    usbInit();

    usbDeviceDisconnect(); // enforce re-enumeration
    for(i = 0; i<250; i++) { // wait 500 ms
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	2a 3f       	cpi	r18, 0xFA	; 250
 10c:	c9 f7       	brne	.-14     	; 0x100 <main+0x1e>
        wdt_reset(); // keep the watchdog happy
        _delay_ms(2);
    }
    usbDeviceConnect();
 10e:	8c 98       	cbi	0x11, 4	; 17

    sei(); // Enable interrupts after re-enumeration
 110:	78 94       	sei

    while(1) {
        wdt_reset(); // keep the watchdog happy
 112:	a8 95       	wdr
        usbPoll();
 114:	0e 94 b9 02 	call	0x572	; 0x572 <usbPoll>
 118:	fc cf       	rjmp	.-8      	; 0x112 <main+0x30>

0000011a <usbCrc16>:
 11a:	a8 2f       	mov	r26, r24
 11c:	b9 2f       	mov	r27, r25
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	50 ea       	ldi	r21, 0xA0	; 160
 126:	60 95       	com	r22
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	09 c0       	rjmp	.+18     	; 0x13e <usbCrcLoopEntry>

0000012c <usbCrcByteLoop>:
 12c:	2d 91       	ld	r18, X+
 12e:	82 27       	eor	r24, r18

00000130 <usbCrcBitLoop>:
 130:	97 95       	ror	r25
 132:	87 95       	ror	r24
 134:	10 f0       	brcs	.+4      	; 0x13a <usbCrcNoXor>
 136:	84 27       	eor	r24, r20
 138:	95 27       	eor	r25, r21

0000013a <usbCrcNoXor>:
 13a:	30 5e       	subi	r19, 0xE0	; 224
 13c:	c8 f3       	brcs	.-14     	; 0x130 <usbCrcBitLoop>

0000013e <usbCrcLoopEntry>:
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	a8 f3       	brcs	.-22     	; 0x12c <usbCrcByteLoop>

00000142 <usbCrcReady>:
 142:	08 95       	ret

00000144 <usbCrc16Append>:
 144:	ea df       	rcall	.-44     	; 0x11a <usbCrc16>
 146:	8d 93       	st	X+, r24
 148:	9d 93       	st	X+, r25
 14a:	08 95       	ret

0000014c <__vector_1>:
 14c:	cf 93       	push	r28
 14e:	cf b7       	in	r28, 0x3f	; 63
 150:	cf 93       	push	r28
 152:	df 93       	push	r29

00000154 <waitForJ>:
 154:	c3 95       	inc	r28
 156:	84 9b       	sbis	0x10, 4	; 16
 158:	e9 f7       	brne	.-6      	; 0x154 <waitForJ>

0000015a <waitForK>:
 15a:	84 9b       	sbis	0x10, 4	; 16
 15c:	0b c0       	rjmp	.+22     	; 0x174 <foundK>
 15e:	84 9b       	sbis	0x10, 4	; 16
 160:	09 c0       	rjmp	.+18     	; 0x174 <foundK>
 162:	84 9b       	sbis	0x10, 4	; 16
 164:	07 c0       	rjmp	.+14     	; 0x174 <foundK>
 166:	84 9b       	sbis	0x10, 4	; 16
 168:	05 c0       	rjmp	.+10     	; 0x174 <foundK>
 16a:	84 9b       	sbis	0x10, 4	; 16
 16c:	03 c0       	rjmp	.+6      	; 0x174 <foundK>
 16e:	84 9b       	sbis	0x10, 4	; 16
 170:	01 c0       	rjmp	.+2      	; 0x174 <foundK>
 172:	89 c0       	rjmp	.+274    	; 0x286 <sofError>

00000174 <foundK>:
 174:	6f 93       	push	r22
 176:	c0 91 70 00 	lds	r28, 0x0070
 17a:	dd 27       	eor	r29, r29
 17c:	c9 58       	subi	r28, 0x89	; 137
 17e:	df 4f       	sbci	r29, 0xFF	; 255
 180:	2f 93       	push	r18
 182:	65 e5       	ldi	r22, 0x55	; 85
 184:	84 9b       	sbis	0x10, 4	; 16
 186:	03 c0       	rjmp	.+6      	; 0x18e <haveTwoBitsK>
 188:	2f 91       	pop	r18
 18a:	6f 91       	pop	r22
 18c:	e6 cf       	rjmp	.-52     	; 0x15a <waitForK>

0000018e <haveTwoBitsK>:
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	4f 93       	push	r20
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	40 e1       	ldi	r20, 0x10	; 16
 198:	5f 93       	push	r21
 19a:	00 b3       	in	r16, 0x10	; 16
 19c:	04 71       	andi	r16, 0x14	; 20
 19e:	04 fb       	bst	r16, 4
 1a0:	27 f9       	bld	r18, 7
 1a2:	3f 93       	push	r19
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	3b e0       	ldi	r19, 0x0B	; 11
 1a8:	39 c0       	rjmp	.+114    	; 0x21c <rxbit1>

000001aa <unstuff6>:
 1aa:	14 71       	andi	r17, 0x14	; 20
 1ac:	40 64       	ori	r20, 0x40	; 64
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	01 2f       	mov	r16, r17
 1b2:	5f 5f       	subi	r21, 0xFF	; 255
 1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <didUnstuff6>

000001b6 <unstuff7>:
 1b6:	40 68       	ori	r20, 0x80	; 128
 1b8:	10 b3       	in	r17, 0x10	; 16
 1ba:	14 71       	andi	r17, 0x14	; 20
 1bc:	2f 77       	andi	r18, 0x7F	; 127
 1be:	52 50       	subi	r21, 0x02	; 2
 1c0:	1f c0       	rjmp	.+62     	; 0x200 <didUnstuff7>

000001c2 <unstuffEven>:
 1c2:	40 64       	ori	r20, 0x40	; 64
 1c4:	00 b3       	in	r16, 0x10	; 16
 1c6:	2f 77       	andi	r18, 0x7F	; 127
 1c8:	04 71       	andi	r16, 0x14	; 20
 1ca:	d1 f1       	breq	.+116    	; 0x240 <se0>
 1cc:	5f 5f       	subi	r21, 0xFF	; 255
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <unstuffEven+0xe>
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <didUnstuffE>

000001d2 <unstuffOdd>:
 1d2:	40 62       	ori	r20, 0x20	; 32
 1d4:	10 b3       	in	r17, 0x10	; 16
 1d6:	2f 77       	andi	r18, 0x7F	; 127
 1d8:	14 71       	andi	r17, 0x14	; 20
 1da:	91 f1       	breq	.+100    	; 0x240 <se0>
 1dc:	5f 5f       	subi	r21, 0xFF	; 255
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <unstuffOdd+0xe>
 1e0:	25 c0       	rjmp	.+74     	; 0x22c <didUnstuffO>

000001e2 <rxByteLoop>:
 1e2:	04 71       	andi	r16, 0x14	; 20
 1e4:	10 27       	eor	r17, r16
 1e6:	51 50       	subi	r21, 0x01	; 1
 1e8:	12 f4       	brpl	.+4      	; 0x1ee <skipLeap>
 1ea:	5d 5f       	subi	r21, 0xFD	; 253
	...

000001ee <skipLeap>:
 1ee:	11 50       	subi	r17, 0x01	; 1
 1f0:	27 95       	ror	r18

000001f2 <didUnstuff6>:
 1f2:	2c 3f       	cpi	r18, 0xFC	; 252
 1f4:	10 b3       	in	r17, 0x10	; 16
 1f6:	c8 f6       	brcc	.-78     	; 0x1aa <unstuff6>
 1f8:	14 71       	andi	r17, 0x14	; 20
 1fa:	01 27       	eor	r16, r17
 1fc:	01 50       	subi	r16, 0x01	; 1
 1fe:	27 95       	ror	r18

00000200 <didUnstuff7>:
 200:	2c 3f       	cpi	r18, 0xFC	; 252
 202:	c8 f6       	brcc	.-78     	; 0x1b6 <unstuff7>
 204:	42 27       	eor	r20, r18
 206:	49 93       	st	Y+, r20

00000208 <rxBitLoop>:
 208:	00 b3       	in	r16, 0x10	; 16
 20a:	04 71       	andi	r16, 0x14	; 20
 20c:	10 27       	eor	r17, r16
 20e:	4f 73       	andi	r20, 0x3F	; 63
 210:	11 50       	subi	r17, 0x01	; 1
 212:	27 95       	ror	r18
 214:	2c 3f       	cpi	r18, 0xFC	; 252
 216:	a8 f6       	brcc	.-86     	; 0x1c2 <unstuffEven>

00000218 <didUnstuffE>:
 218:	46 95       	lsr	r20
 21a:	46 95       	lsr	r20

0000021c <rxbit1>:
 21c:	10 b3       	in	r17, 0x10	; 16
 21e:	14 71       	andi	r17, 0x14	; 20
 220:	79 f0       	breq	.+30     	; 0x240 <se0>
 222:	01 27       	eor	r16, r17
 224:	01 50       	subi	r16, 0x01	; 1
 226:	27 95       	ror	r18
 228:	2c 3f       	cpi	r18, 0xFC	; 252
 22a:	98 f6       	brcc	.-90     	; 0x1d2 <unstuffOdd>

0000022c <didUnstuffO>:
 22c:	6b 5a       	subi	r22, 0xAB	; 171
 22e:	60 f3       	brcs	.-40     	; 0x208 <rxBitLoop>
 230:	31 50       	subi	r19, 0x01	; 1
 232:	00 b3       	in	r16, 0x10	; 16
 234:	b0 f6       	brcc	.-84     	; 0x1e2 <rxByteLoop>
 236:	00 c0       	rjmp	.+0      	; 0x238 <overflow>

00000238 <overflow>:
 238:	10 e4       	ldi	r17, 0x40	; 64
 23a:	1a bf       	out	0x3a, r17	; 58

0000023c <ignorePacket>:
 23c:	00 27       	eor	r16, r16
 23e:	17 c0       	rjmp	.+46     	; 0x26e <handleSetupOrOut>

00000240 <se0>:
 240:	3b 50       	subi	r19, 0x0B	; 11
 242:	31 95       	neg	r19
 244:	c3 1b       	sub	r28, r19
 246:	d0 40       	sbci	r29, 0x00	; 0
 248:	10 e4       	ldi	r17, 0x40	; 64
 24a:	1a bf       	out	0x3a, r17	; 58
 24c:	08 81       	ld	r16, Y
 24e:	03 3c       	cpi	r16, 0xC3	; 195
 250:	f9 f0       	breq	.+62     	; 0x290 <handleData>
 252:	0b 34       	cpi	r16, 0x4B	; 75
 254:	e9 f0       	breq	.+58     	; 0x290 <handleData>
 256:	20 91 6e 00 	lds	r18, 0x006E
 25a:	19 81       	ldd	r17, Y+1	; 0x01
 25c:	11 0f       	add	r17, r17
 25e:	12 13       	cpse	r17, r18
 260:	ed cf       	rjmp	.-38     	; 0x23c <ignorePacket>
 262:	09 36       	cpi	r16, 0x69	; 105
 264:	51 f1       	breq	.+84     	; 0x2ba <handleIn>
 266:	0d 32       	cpi	r16, 0x2D	; 45
 268:	11 f0       	breq	.+4      	; 0x26e <handleSetupOrOut>
 26a:	01 3e       	cpi	r16, 0xE1	; 225
 26c:	39 f7       	brne	.-50     	; 0x23c <ignorePacket>

0000026e <handleSetupOrOut>:
 26e:	00 93 75 00 	sts	0x0075, r16

00000272 <doReturn>:
 272:	3f 91       	pop	r19
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	2f 91       	pop	r18
 27e:	6f 91       	pop	r22
 280:	ca b7       	in	r28, 0x3a	; 58
 282:	c6 fd       	sbrc	r28, 6
 284:	67 cf       	rjmp	.-306    	; 0x154 <waitForJ>

00000286 <sofError>:
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	cf bf       	out	0x3f, r28	; 63
 28c:	cf 91       	pop	r28
 28e:	18 95       	reti

00000290 <handleData>:
 290:	20 91 75 00 	lds	r18, 0x0075
 294:	22 23       	and	r18, r18
 296:	69 f3       	breq	.-38     	; 0x272 <doReturn>
 298:	10 91 73 00 	lds	r17, 0x0073
 29c:	11 23       	and	r17, r17
 29e:	39 f5       	brne	.+78     	; 0x2ee <sendNakAndReti>
 2a0:	34 30       	cpi	r19, 0x04	; 4
 2a2:	3a f1       	brmi	.+78     	; 0x2f2 <sendAckAndReti>
 2a4:	30 93 73 00 	sts	0x0073, r19
 2a8:	20 93 6f 00 	sts	0x006F, r18
 2ac:	10 91 70 00 	lds	r17, 0x0070
 2b0:	3b e0       	ldi	r19, 0x0B	; 11
 2b2:	31 1b       	sub	r19, r17
 2b4:	30 93 70 00 	sts	0x0070, r19
 2b8:	1c c0       	rjmp	.+56     	; 0x2f2 <sendAckAndReti>

000002ba <handleIn>:
 2ba:	00 91 73 00 	lds	r16, 0x0073
 2be:	01 30       	cpi	r16, 0x01	; 1
 2c0:	b4 f4       	brge	.+44     	; 0x2ee <sendNakAndReti>
 2c2:	0a e5       	ldi	r16, 0x5A	; 90
 2c4:	30 91 60 00 	lds	r19, 0x0060
 2c8:	34 fd       	sbrc	r19, 4
 2ca:	14 c0       	rjmp	.+40     	; 0x2f4 <sendCntAndReti>
 2cc:	00 93 60 00 	sts	0x0060, r16
 2d0:	c3 e6       	ldi	r28, 0x63	; 99
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <usbSendAndReti>

000002d6 <bitstuffN>:
 2d6:	05 27       	eor	r16, r21
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <bitstuffN+0x6>
 2dc:	00 00       	nop
 2de:	02 bb       	out	0x12, r16	; 18
 2e0:	1a c0       	rjmp	.+52     	; 0x316 <didStuffN>

000002e2 <bitstuff6>:
 2e2:	05 27       	eor	r16, r21
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	22 1f       	adc	r18, r18
 2e8:	1d c0       	rjmp	.+58     	; 0x324 <didStuff6>

000002ea <bitstuff7>:
 2ea:	10 e0       	ldi	r17, 0x00	; 0
 2ec:	21 c0       	rjmp	.+66     	; 0x330 <didStuff7>

000002ee <sendNakAndReti>:
 2ee:	4a e5       	ldi	r20, 0x5A	; 90
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <sendX3AndReti>

000002f2 <sendAckAndReti>:
 2f2:	32 ed       	ldi	r19, 0xD2	; 210

000002f4 <sendCntAndReti>:
 2f4:	43 2f       	mov	r20, r19

000002f6 <sendX3AndReti>:
 2f6:	c4 e1       	ldi	r28, 0x14	; 20
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	32 e0       	ldi	r19, 0x02	; 2

000002fc <usbSendAndReti>:
 2fc:	11 b3       	in	r17, 0x11	; 17
 2fe:	14 61       	ori	r17, 0x14	; 20
 300:	94 9a       	sbi	0x12, 4	; 18
 302:	02 b3       	in	r16, 0x12	; 18
 304:	11 bb       	out	0x11, r17	; 17
 306:	54 e1       	ldi	r21, 0x14	; 20
 308:	20 e8       	ldi	r18, 0x80	; 128

0000030a <txByteLoop>:
 30a:	65 e3       	ldi	r22, 0x35	; 53

0000030c <txBitLoop>:
 30c:	20 ff       	sbrs	r18, 0
 30e:	05 27       	eor	r16, r21
 310:	02 bb       	out	0x12, r16	; 18
 312:	27 95       	ror	r18
 314:	17 95       	ror	r17

00000316 <didStuffN>:
 316:	1c 3f       	cpi	r17, 0xFC	; 252
 318:	f0 f6       	brcc	.-68     	; 0x2d6 <bitstuffN>
 31a:	66 95       	lsr	r22
 31c:	b8 f7       	brcc	.-18     	; 0x30c <txBitLoop>
 31e:	b1 f7       	brne	.-20     	; 0x30c <txBitLoop>
 320:	20 ff       	sbrs	r18, 0
 322:	05 27       	eor	r16, r21

00000324 <didStuff6>:
 324:	02 bb       	out	0x12, r16	; 18
 326:	27 95       	ror	r18
 328:	17 95       	ror	r17
 32a:	1c 3f       	cpi	r17, 0xFC	; 252
 32c:	d0 f6       	brcc	.-76     	; 0x2e2 <bitstuff6>
 32e:	27 95       	ror	r18

00000330 <didStuff7>:
 330:	17 95       	ror	r17
 332:	17 ff       	sbrs	r17, 7
 334:	05 27       	eor	r16, r21
 336:	00 00       	nop
 338:	1c 3f       	cpi	r17, 0xFC	; 252
 33a:	02 bb       	out	0x12, r16	; 18
 33c:	b0 f6       	brcc	.-84     	; 0x2ea <bitstuff7>
 33e:	29 91       	ld	r18, Y+
 340:	3a 95       	dec	r19
 342:	19 f7       	brne	.-58     	; 0x30a <txByteLoop>
 344:	0b 7e       	andi	r16, 0xEB	; 235
 346:	10 91 74 00 	lds	r17, 0x0074
 34a:	11 0f       	add	r17, r17
 34c:	c6 51       	subi	r28, 0x16	; 22
 34e:	d0 40       	sbci	r29, 0x00	; 0
 350:	02 bb       	out	0x12, r16	; 18
 352:	11 f0       	breq	.+4      	; 0x358 <skipAddrAssign>
 354:	10 93 6e 00 	sts	0x006E, r17

00000358 <skipAddrAssign>:
 358:	10 e4       	ldi	r17, 0x40	; 64
 35a:	1a bf       	out	0x3a, r17	; 58
 35c:	00 61       	ori	r16, 0x10	; 16
 35e:	11 b3       	in	r17, 0x11	; 17
 360:	1b 7e       	andi	r17, 0xEB	; 235
 362:	40 2f       	mov	r20, r16
 364:	4b 7e       	andi	r20, 0xEB	; 235
 366:	54 e0       	ldi	r21, 0x04	; 4

00000368 <se0Delay>:
 368:	5a 95       	dec	r21
 36a:	f1 f7       	brne	.-4      	; 0x368 <se0Delay>
 36c:	02 bb       	out	0x12, r16	; 18
 36e:	11 bb       	out	0x11, r17	; 17
 370:	42 bb       	out	0x12, r20	; 18
 372:	7f cf       	rjmp	.-258    	; 0x272 <doReturn>

00000374 <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
 374:	87 b3       	in	r24, 0x17	; 23
 376:	80 7f       	andi	r24, 0xF0	; 240
 378:	87 bb       	out	0x17, r24	; 23

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;

	//change LCD mode
	SET_RW();		//Read mode
 37a:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
 37c:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 384:	22 e0       	ldi	r18, 0x02	; 2
 386:	34 e0       	ldi	r19, 0x04	; 4
 388:	c6 9a       	sbi	0x18, 6	; 24
 38a:	82 2f       	mov	r24, r18
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 390:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 392:	82 95       	swap	r24
 394:	80 7f       	andi	r24, 0xF0	; 240
 396:	92 2f       	mov	r25, r18
 398:	9a 95       	dec	r25
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 39c:	c6 98       	cbi	0x18, 6	; 24
 39e:	93 2f       	mov	r25, r19
 3a0:	9a 95       	dec	r25
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 3a4:	c6 9a       	sbi	0x18, 6	; 24
 3a6:	92 2f       	mov	r25, r18
 3a8:	9a 95       	dec	r25
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 3ac:	96 b3       	in	r25, 0x16	; 22
 3ae:	92 2f       	mov	r25, r18
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 3b4:	c6 98       	cbi	0x18, 6	; 24
 3b6:	93 2f       	mov	r25, r19
 3b8:	9a 95       	dec	r25
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 3bc:	87 fd       	sbrc	r24, 7
 3be:	e4 cf       	rjmp	.-56     	; 0x388 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 3c0:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 3c2:	87 b3       	in	r24, 0x17	; 23
 3c4:	8f 60       	ori	r24, 0x0F	; 15
 3c6:	87 bb       	out	0x17, r24	; 23

}
 3c8:	08 95       	ret

000003ca <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 3ca:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 3cc:	66 23       	and	r22, r22
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <LCDByte+0xa>
	CLEAR_RS();
 3d0:	c4 98       	cbi	0x18, 4	; 24
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <LCDByte+0xc>
else
	SET_RS();
 3d4:	c4 9a       	sbi	0x18, 4	; 24
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	8a 95       	dec	r24
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 3dc:	c6 9a       	sbi	0x18, 6	; 24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 3de:	88 b3       	in	r24, 0x18	; 24
 3e0:	92 2f       	mov	r25, r18
 3e2:	92 95       	swap	r25
 3e4:	9f 70       	andi	r25, 0x0F	; 15
 3e6:	80 7f       	andi	r24, 0xF0	; 240
 3e8:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 3ea:	98 bb       	out	0x18, r25	; 24
 3ec:	94 e0       	ldi	r25, 0x04	; 4
 3ee:	89 2f       	mov	r24, r25
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCDByte+0x26>

_delay_us(1);			//tEH


CLEAR_E();
 3f4:	c6 98       	cbi	0x18, 6	; 24
 3f6:	89 2f       	mov	r24, r25
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 3fc:	c6 9a       	sbi	0x18, 6	; 24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 3fe:	88 b3       	in	r24, 0x18	; 24
 400:	2f 70       	andi	r18, 0x0F	; 15
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 406:	88 bb       	out	0x18, r24	; 24
 408:	89 2f       	mov	r24, r25
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 40e:	c6 98       	cbi	0x18, 6	; 24
 410:	9a 95       	dec	r25
 412:	f1 f7       	brne	.-4      	; 0x410 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 414:	0e 94 ba 01 	call	0x374	; 0x374 <LCDBusyLoop>
}
 418:	08 95       	ret

0000041a <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 41a:	1f 93       	push	r17
 41c:	18 2f       	mov	r17, r24
 41e:	8c e2       	ldi	r24, 0x2C	; 44
 420:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 422:	2c e2       	ldi	r18, 0x2C	; 44
 424:	31 e0       	ldi	r19, 0x01	; 1
 426:	f9 01       	movw	r30, r18
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <InitLCD+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42e:	d9 f7       	brne	.-10     	; 0x426 <InitLCD+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 430:	87 b3       	in	r24, 0x17	; 23
 432:	8f 60       	ori	r24, 0x0F	; 15
 434:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 436:	be 9a       	sbi	0x17, 6	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 438:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 43a:	bd 9a       	sbi	0x17, 5	; 23

	LCD_DATA_PORT&=0XF0;
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 442:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RW();
 444:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 446:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	8a 95       	dec	r24
 44c:	f1 f7       	brne	.-4      	; 0x44a <InitLCD+0x30>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 44e:	c6 9a       	sbi	0x18, 6	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 450:	c1 9a       	sbi	0x18, 1	; 24
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	98 2f       	mov	r25, r24
 456:	9a 95       	dec	r25
 458:	f1 f7       	brne	.-4      	; 0x456 <InitLCD+0x3c>
	_delay_us(1);
	CLEAR_E();
 45a:	c6 98       	cbi	0x18, 6	; 24
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <InitLCD+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 460:	0e 94 ba 01 	call	0x374	; 0x374 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	81 2f       	mov	r24, r17
 468:	8c 60       	ori	r24, 0x0C	; 12
 46a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	88 e2       	ldi	r24, 0x28	; 40
 472:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCDByte>
}
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ec 01       	movw	r28, r24
 480:	04 c0       	rjmp	.+8      	; 0x48a <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCDByte>
	msg++;
 488:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 48a:	88 81       	ld	r24, Y
 48c:	88 23       	and	r24, r24
 48e:	c9 f7       	brne	.-14     	; 0x482 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <LCDWriteInt+0xe>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <LCDWriteInt+0x10>
 4a6:	0f 92       	push	r0
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	9c 01       	movw	r18, r24
 4ae:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 4b0:	fe 01       	movw	r30, r28
 4b2:	31 96       	adiw	r30, 0x01	; 1
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	df 01       	movw	r26, r30
 4b8:	1d 92       	st	X+, r1
 4ba:	8a 95       	dec	r24
 4bc:	e9 f7       	brne	.-6      	; 0x4b8 <LCDWriteInt+0x22>
 4be:	fe 01       	movw	r30, r28
 4c0:	35 96       	adiw	r30, 0x05	; 5
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 4c4:	c9 01       	movw	r24, r18
 4c6:	6a e0       	ldi	r22, 0x0A	; 10
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	0e 94 9b 03 	call	0x736	; 0x736 <__divmodhi4>
 4ce:	80 83       	st	Z, r24
	val=val/10;
 4d0:	c9 01       	movw	r24, r18
 4d2:	6a e0       	ldi	r22, 0x0A	; 10
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	0e 94 9b 03 	call	0x736	; 0x736 <__divmodhi4>
 4da:	9b 01       	movw	r18, r22
 4dc:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	81 f7       	brne	.-32     	; 0x4c4 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 4e4:	bf ef       	ldi	r27, 0xFF	; 255
 4e6:	0f 3f       	cpi	r16, 0xFF	; 255
 4e8:	1b 07       	cpc	r17, r27
 4ea:	79 f4       	brne	.+30     	; 0x50a <LCDWriteInt+0x74>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 4f0:	ae 01       	movw	r20, r28
 4f2:	4f 5f       	subi	r20, 0xFF	; 255
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <LCDWriteInt+0x66>
 4f8:	2f 5f       	subi	r18, 0xFF	; 255
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255
 4fc:	fa 01       	movw	r30, r20
 4fe:	e2 0f       	add	r30, r18
 500:	f3 1f       	adc	r31, r19
 502:	80 81       	ld	r24, Z
 504:	88 23       	and	r24, r24
 506:	c1 f3       	breq	.-16     	; 0x4f8 <LCDWriteInt+0x62>
 508:	04 c0       	rjmp	.+8      	; 0x512 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 50a:	25 e0       	ldi	r18, 0x05	; 5
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	20 1b       	sub	r18, r16
 510:	31 0b       	sbc	r19, r17
 512:	7e 01       	movw	r14, r28
 514:	08 94       	sec
 516:	e1 1c       	adc	r14, r1
 518:	f1 1c       	adc	r15, r1
 51a:	e2 0e       	add	r14, r18
 51c:	f3 1e       	adc	r15, r19
 51e:	89 01       	movw	r16, r18
 520:	09 c0       	rjmp	.+18     	; 0x534 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 522:	f7 01       	movw	r30, r14
 524:	81 91       	ld	r24, Z+
 526:	7f 01       	movw	r14, r30
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 530:	0f 5f       	subi	r16, 0xFF	; 255
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	05 30       	cpi	r16, 0x05	; 5
 536:	11 05       	cpc	r17, r1
 538:	a4 f3       	brlt	.-24     	; 0x522 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	cf 91       	pop	r28
 546:	df 91       	pop	r29
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	08 95       	ret

00000552 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 552:	88 32       	cpi	r24, 0x28	; 40
 554:	30 f4       	brcc	.+12     	; 0x562 <LCDGotoXY+0x10>
 if(x<40)
 {
  if(y) x|=0b01000000;
 556:	61 11       	cpse	r22, r1
 558:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCDByte>
 562:	08 95       	ret

00000564 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 564:	85 b7       	in	r24, 0x35	; 53
 566:	82 60       	ori	r24, 0x02	; 2
 568:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 56a:	8b b7       	in	r24, 0x3b	; 59
 56c:	80 64       	ori	r24, 0x40	; 64
 56e:	8b bf       	out	0x3b, r24	; 59
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 570:	08 95       	ret

00000572 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 578:	90 91 73 00 	lds	r25, 0x0073
 57c:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 57e:	97 fd       	sbrc	r25, 7
 580:	7e c0       	rjmp	.+252    	; 0x67e <usbPoll+0x10c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 582:	20 91 70 00 	lds	r18, 0x0070
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 586:	80 91 6f 00 	lds	r24, 0x006F
 58a:	8d 32       	cpi	r24, 0x2D	; 45
 58c:	09 f0       	breq	.+2      	; 0x590 <usbPoll+0x1e>
 58e:	75 c0       	rjmp	.+234    	; 0x67a <usbPoll+0x108>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 590:	98 30       	cpi	r25, 0x08	; 8
 592:	09 f0       	breq	.+2      	; 0x596 <usbPoll+0x24>
 594:	72 c0       	rjmp	.+228    	; 0x67a <usbPoll+0x108>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 596:	cc e0       	ldi	r28, 0x0C	; 12
 598:	d0 e0       	ldi	r29, 0x00	; 0
 59a:	c2 1b       	sub	r28, r18
 59c:	d1 09       	sbc	r29, r1
 59e:	c9 58       	subi	r28, 0x89	; 137
 5a0:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 5a2:	83 ec       	ldi	r24, 0xC3	; 195
 5a4:	80 93 63 00 	sts	0x0063, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 5a8:	8a e5       	ldi	r24, 0x5A	; 90
 5aa:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 5ae:	10 92 62 00 	sts	0x0062, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 5b2:	88 81       	ld	r24, Y
 5b4:	80 76       	andi	r24, 0x60	; 96
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 5b8:	ce 01       	movw	r24, r28
 5ba:	0e 94 6f 00 	call	0xde	; 0xde <usbFunctionSetup>
 5be:	28 2f       	mov	r18, r24
 5c0:	53 c0       	rjmp	.+166    	; 0x668 <usbPoll+0xf6>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 5c2:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 5c4:	10 92 6c 00 	sts	0x006C, r1
    SWITCH_START(rq->bRequest)
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 5ca:	88 23       	and	r24, r24
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 5ce:	10 92 6d 00 	sts	0x006D, r1
 5d2:	22 e0       	ldi	r18, 0x02	; 2
 5d4:	43 c0       	rjmp	.+134    	; 0x65c <usbPoll+0xea>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 5d6:	85 30       	cpi	r24, 0x05	; 5
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 5da:	90 93 74 00 	sts	0x0074, r25
 5de:	3d c0       	rjmp	.+122    	; 0x65a <usbPoll+0xe8>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 5e0:	86 30       	cpi	r24, 0x06	; 6
 5e2:	61 f5       	brne	.+88     	; 0x63c <usbPoll+0xca>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	19 f4       	brne	.+6      	; 0x5f0 <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 5ea:	8c e7       	ldi	r24, 0x7C	; 124
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <usbPoll+0xaa>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	19 f4       	brne	.+6      	; 0x5fa <usbPoll+0x88>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 5f4:	8e e8       	ldi	r24, 0x8E	; 142
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	11 c0       	rjmp	.+34     	; 0x61c <usbPoll+0xaa>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	d1 f4       	brne	.+52     	; 0x632 <usbPoll+0xc0>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 600:	88 23       	and	r24, r24
 602:	41 f4       	brne	.+16     	; 0x614 <usbPoll+0xa2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 604:	84 e5       	ldi	r24, 0x54	; 84
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	90 93 72 00 	sts	0x0072, r25
 60c:	80 93 71 00 	sts	0x0071, r24
 610:	24 e0       	ldi	r18, 0x04	; 4
 612:	10 c0       	rjmp	.+32     	; 0x634 <usbPoll+0xc2>
        SWITCH_CASE(1)
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	41 f4       	brne	.+16     	; 0x628 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 618:	88 e5       	ldi	r24, 0x58	; 88
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	90 93 72 00 	sts	0x0072, r25
 620:	80 93 71 00 	sts	0x0071, r24
 624:	22 e1       	ldi	r18, 0x12	; 18
 626:	06 c0       	rjmp	.+12     	; 0x634 <usbPoll+0xc2>
        SWITCH_CASE(2)
 628:	82 30       	cpi	r24, 0x02	; 2
 62a:	19 f4       	brne	.+6      	; 0x632 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 62c:	8a e6       	ldi	r24, 0x6A	; 106
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	f5 cf       	rjmp	.-22     	; 0x61c <usbPoll+0xaa>
 632:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 634:	80 e4       	ldi	r24, 0x40	; 64
 636:	80 93 62 00 	sts	0x0062, r24
 63a:	16 c0       	rjmp	.+44     	; 0x668 <usbPoll+0xf6>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	21 f4       	brne	.+8      	; 0x648 <usbPoll+0xd6>
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	86 e7       	ldi	r24, 0x76	; 118
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0c c0       	rjmp	.+24     	; 0x660 <usbPoll+0xee>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 648:	89 30       	cpi	r24, 0x09	; 9
 64a:	19 f4       	brne	.+6      	; 0x652 <usbPoll+0xe0>
        usbConfiguration = value;
 64c:	90 93 76 00 	sts	0x0076, r25
 650:	04 c0       	rjmp	.+8      	; 0x65a <usbPoll+0xe8>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 652:	8a 30       	cpi	r24, 0x0A	; 10
 654:	11 f4       	brne	.+4      	; 0x65a <usbPoll+0xe8>
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	01 c0       	rjmp	.+2      	; 0x65c <usbPoll+0xea>
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	8c e6       	ldi	r24, 0x6C	; 108
 65e:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 660:	90 93 72 00 	sts	0x0072, r25
 664:	80 93 71 00 	sts	0x0071, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 668:	8f 81       	ldd	r24, Y+7	; 0x07
 66a:	88 23       	and	r24, r24
 66c:	21 f4       	brne	.+8      	; 0x676 <usbPoll+0x104>
 66e:	8e 81       	ldd	r24, Y+6	; 0x06
 670:	82 17       	cp	r24, r18
 672:	08 f4       	brcc	.+2      	; 0x676 <usbPoll+0x104>
 674:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 676:	20 93 61 00 	sts	0x0061, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 67a:	10 92 73 00 	sts	0x0073, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 67e:	80 91 60 00 	lds	r24, 0x0060
 682:	84 ff       	sbrs	r24, 4
 684:	4a c0       	rjmp	.+148    	; 0x71a <usbPoll+0x1a8>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 686:	80 91 61 00 	lds	r24, 0x0061
 68a:	8f 3f       	cpi	r24, 0xFF	; 255
 68c:	09 f4       	brne	.+2      	; 0x690 <usbPoll+0x11e>
 68e:	45 c0       	rjmp	.+138    	; 0x71a <usbPoll+0x1a8>
 690:	18 2f       	mov	r17, r24
 692:	89 30       	cpi	r24, 0x09	; 9
 694:	08 f0       	brcs	.+2      	; 0x698 <usbPoll+0x126>
 696:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 698:	81 1b       	sub	r24, r17
 69a:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 69e:	80 91 63 00 	lds	r24, 0x0063
 6a2:	98 e8       	ldi	r25, 0x88	; 136
 6a4:	89 27       	eor	r24, r25
 6a6:	80 93 63 00 	sts	0x0063, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 6aa:	11 23       	and	r17, r17
 6ac:	41 f1       	breq	.+80     	; 0x6fe <usbPoll+0x18c>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 6ae:	20 91 71 00 	lds	r18, 0x0071
 6b2:	30 91 72 00 	lds	r19, 0x0072
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 6b6:	80 91 62 00 	lds	r24, 0x0062
 6ba:	86 ff       	sbrs	r24, 6
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <usbPoll+0x166>
 6be:	a4 e6       	ldi	r26, 0x64	; 100
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 6c6:	f9 01       	movw	r30, r18
 6c8:	e8 0f       	add	r30, r24
 6ca:	f9 1f       	adc	r31, r25
 6cc:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 6ce:	ed 93       	st	X+, r30
 6d0:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 6d2:	18 17       	cp	r17, r24
 6d4:	c1 f7       	brne	.-16     	; 0x6c6 <usbPoll+0x154>
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <usbPoll+0x176>
 6d8:	91 2f       	mov	r25, r17
 6da:	d9 01       	movw	r26, r18
 6dc:	e4 e6       	ldi	r30, 0x64	; 100
 6de:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 6e0:	8d 91       	ld	r24, X+
 6e2:	81 93       	st	Z+, r24
                }while(--i);
 6e4:	91 50       	subi	r25, 0x01	; 1
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <usbPoll+0x16e>
 6e8:	11 50       	subi	r17, 0x01	; 1
 6ea:	81 2f       	mov	r24, r17
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	1f 5f       	subi	r17, 0xFF	; 255
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	82 0f       	add	r24, r18
 6f4:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 6f6:	90 93 72 00 	sts	0x0072, r25
 6fa:	80 93 71 00 	sts	0x0071, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 6fe:	61 2f       	mov	r22, r17
 700:	84 e6       	ldi	r24, 0x64	; 100
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 a2 00 	call	0x144	; 0x144 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 708:	61 2f       	mov	r22, r17
 70a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 70c:	6c 30       	cpi	r22, 0x0C	; 12
 70e:	19 f0       	breq	.+6      	; 0x716 <usbPoll+0x1a4>
            usbMsgLen = USB_NO_MSG;
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 716:	60 93 60 00 	sts	0x0060, r22
 71a:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 71c:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 71e:	84 71       	andi	r24, 0x14	; 20
 720:	31 f4       	brne	.+12     	; 0x72e <usbPoll+0x1bc>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 722:	91 50       	subi	r25, 0x01	; 1
 724:	d9 f7       	brne	.-10     	; 0x71c <usbPoll+0x1aa>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 726:	10 92 74 00 	sts	0x0074, r1
    usbDeviceAddr = 0;
 72a:	10 92 6e 00 	sts	0x006E, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	08 95       	ret

00000736 <__divmodhi4>:
 736:	97 fb       	bst	r25, 7
 738:	09 2e       	mov	r0, r25
 73a:	07 26       	eor	r0, r23
 73c:	0a d0       	rcall	.+20     	; 0x752 <__divmodhi4_neg1>
 73e:	77 fd       	sbrc	r23, 7
 740:	04 d0       	rcall	.+8      	; 0x74a <__divmodhi4_neg2>
 742:	0c d0       	rcall	.+24     	; 0x75c <__udivmodhi4>
 744:	06 d0       	rcall	.+12     	; 0x752 <__divmodhi4_neg1>
 746:	00 20       	and	r0, r0
 748:	1a f4       	brpl	.+6      	; 0x750 <__divmodhi4_exit>

0000074a <__divmodhi4_neg2>:
 74a:	70 95       	com	r23
 74c:	61 95       	neg	r22
 74e:	7f 4f       	sbci	r23, 0xFF	; 255

00000750 <__divmodhi4_exit>:
 750:	08 95       	ret

00000752 <__divmodhi4_neg1>:
 752:	f6 f7       	brtc	.-4      	; 0x750 <__divmodhi4_exit>
 754:	90 95       	com	r25
 756:	81 95       	neg	r24
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__udivmodhi4>:
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	51 e1       	ldi	r21, 0x11	; 17
 762:	07 c0       	rjmp	.+14     	; 0x772 <__udivmodhi4_ep>

00000764 <__udivmodhi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	a6 17       	cp	r26, r22
 76a:	b7 07       	cpc	r27, r23
 76c:	10 f0       	brcs	.+4      	; 0x772 <__udivmodhi4_ep>
 76e:	a6 1b       	sub	r26, r22
 770:	b7 0b       	sbc	r27, r23

00000772 <__udivmodhi4_ep>:
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	5a 95       	dec	r21
 778:	a9 f7       	brne	.-22     	; 0x764 <__udivmodhi4_loop>
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	bc 01       	movw	r22, r24
 780:	cd 01       	movw	r24, r26
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
